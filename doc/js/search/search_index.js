var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/NgcCompliance.html",[0,0.279,1,1.514]],["body/interfaces/NgcCompliance.html",[0,0.515,1,2.365,2,0.939,3,0.456,4,0.515,5,0.456,6,0.435,7,2.599,8,2.28,9,0.515,10,3.399,11,2.871,12,4.156,13,3.963,14,2.54,15,3.963,16,3.963,17,3.301,18,0.456,19,1.573,20,3.301,21,3.963,22,3.963,23,2.871,24,2.54,25,2.589,26,1.362,27,1.08,28,3.963,29,0.578,30,0.034,31,1.879,32,1.325,33,2.064,34,2.064,35,2.28,36,2.161,37,2.28,38,1.879,39,1.879,40,2.064,41,1.573,42,1.879,43,1.879,44,2.871,45,3.198,46,2.064,47,1.879,48,2.54,49,2.064,50,2.28,51,2.28,52,2.064,53,2.28,54,1.879,55,1.879,56,2.54,57,0.515,58,0.939,59,1.325,60,1.325,61,1.182,62,1.291,63,1.291,64,0.026,65,0.026]],["title/classes/NgcContentOptions.html",[18,0.367,66,1.837]],["body/classes/NgcContentOptions.html",[3,0.369,4,0.416,5,0.369,6,0.538,9,0.416,18,0.369,19,1.955,24,2.054,25,2.059,26,1.351,27,1.325,29,0.323,30,0.034,32,1.072,41,1.955,42,1.519,57,0.64,58,0.759,61,1.307,62,1.274,63,1.274,64,0.022,65,0.022,66,2.499,67,1.388,68,5.137,69,1.519,70,2.054,71,2.67,72,1.519,73,2.054,74,0.416,75,0.778,76,1.512,77,2.565,78,2.834,79,4.925,80,3.157,81,3.99,82,4.103,83,0.698,84,2.627,85,2.875,86,4.114,87,2.67,88,4.342,89,3.205,90,3.618,91,3.205,92,2.67,93,4.739,94,2.67,95,4.342,96,3.205,97,3.618,98,3.14,99,3.205,100,3.618,101,3.14,102,3.618,103,3.618,104,2.317,105,3.205,106,4.342,107,3.618,108,3.618]],["title/interfaces/NgcCookieConsent.html",[0,0.279,109,1.663]],["body/interfaces/NgcCookieConsent.html",[0,0.43,2,0.699,3,0.217,4,0.245,5,0.217,6,0.317,9,0.245,18,0.217,19,0.749,26,0.785,27,0.638,29,0.414,30,0.034,57,0.747,58,1.269,59,1.88,60,1.752,61,0.699,62,0.763,63,0.763,64,0.015,65,0.015,72,2.109,74,0.245,75,0.528,76,0.447,83,0.418,109,2.136,110,1.087,111,1.721,112,2.326,113,2.336,114,2.236,115,2.629,116,1.697,117,3.023,118,2.457,119,1.888,120,1.697,121,1.891,122,1.856,123,2.326,124,2.126,125,2.889,126,3.391,127,2.326,128,2.318,129,1.888,130,1.888,131,0.983,132,0.749,133,2.134,134,2.133,135,2.949,136,2.994,137,2.079,138,1.074,139,0.749,140,3.366,141,3.825,142,0.983,143,1.087,144,0.818,145,1.21,146,1.21,147,0.818,148,1.21,149,1.21,150,0.818,151,1.21,152,0.818,153,0.688,154,1.278,155,1.21,156,1.21,157,1.21,158,1.891,159,1.697,160,1.891,161,1.891,162,1.891,163,1.891,164,1.891,165,1.891,166,1.697,167,1.891,168,1.21,169,1.21,170,1.21,171,1.087,172,1.536,173,0.818,174,0.983,175,1.087,176,0.818,177,1.21,178,1.21,179,1.21,180,0.983,181,1.21,182,1.21,183,1.21,184,1.398,185,2.929,186,2.56,187,1.087,188,1.21,189,1.891,190,1.21,191,1.21,192,1.21,193,1.21,194,1.21,195,1.21,196,1.21,197,1.21,198,2.933,199,3.268,200,1.21,201,1.21,202,1.087,203,1.21,204,1.891,205,1.087,206,1.697,207,1.697,208,0.983,209,1.21,210,0.749,211,1.21,212,1.21,213,1.21,214,0.818,215,1.21,216,1.21,217,1.21,218,1.21,219,2.27,220,1.21,221,1.21,222,1.21,223,1.21,224,1.21,225,1.21,226,1.21,227,1.21,228,1.21,229,1.21,230,1.21,231,1.21,232,1.21,233,1.21,234,1.21,235,1.21,236,1.21,237,1.21,238,1.21,239,1.21,240,1.21,241,1.21,242,1.21,243,1.21,244,1.891,245,1.21,246,1.21,247,1.21,248,1.891,249,1.21,250,1.21,251,1.21,252,1.21,253,1.21,254,0.983,255,1.087,256,0.983,257,1.572,258,1.21,259,1.21,260,1.891,261,0.983,262,1.21,263,1.21,264,1.21,265,1.891,266,0.818,267,1.087,268,1.087,269,1.21,270,1.21,271,1.21,272,1.21,273,1.21,274,1.21,275,1.21,276,1.89,277,1.21,278,1.21,279,1.21,280,1.21,281,1.721,282,1.572,283,1.21,284,1.087,285,1.087,286,1.21,287,1.21,288,1.21,289,1.697,290,1.21,291,1.21,292,2.088,293,1.21,294,2.729,295,1.21,296,0.983,297,0.895,298,1.21,299,1.21,300,1.21,301,1.21,302,1.21,303,1.21,304,1.21,305,1.21,306,1.21,307,1.21,308,1.21,309,1.21,310,1.21,311,1.21,312,1.21,313,1.21,314,1.21,315,1.21,316,1.21,317,1.21,318,1.21,319,1.21,320,1.21,321,1.21]],["title/injectables/NgcCookieConsentConfig.html",[122,1.163,138,1.163]],["body/injectables/NgcCookieConsentConfig.html",[1,1.082,2,0.233,3,0.113,4,0.128,5,0.113,6,0.507,9,0.128,10,2.529,11,0.987,12,2.278,14,3.16,17,3.956,18,0.422,19,1.956,20,2.84,23,0.987,26,1.127,27,1.271,29,0.099,30,0.034,31,1.471,32,1.47,33,0.893,34,0.893,36,1.84,39,1.844,40,1.424,41,1.353,42,2.014,43,1.739,47,2.084,51,0.987,52,0.893,53,2.604,54,2.084,55,1.082,57,0.477,58,0.648,59,0.914,61,0.807,62,0.707,63,0.882,64,0.009,65,0.009,66,1.313,67,1.961,70,2.616,71,1.429,72,1.082,73,2.493,74,0.128,75,0.307,76,1.481,78,1.573,80,1.1,83,0.676,84,2.098,85,2.201,98,1.24,101,1.24,114,1.296,118,1.429,122,0.625,124,2.148,126,1.962,132,0.681,134,2.465,136,2.796,137,1.619,138,0.625,139,0.39,143,0.987,159,0.987,171,0.987,180,0.893,186,1.573,187,1.962,210,0.681,214,1.344,257,0.743,266,2.256,267,0.987,268,0.566,276,0.512,281,0.466,282,0.426,296,0.893,297,0.813,322,0.63,323,4.843,324,0.819,325,2.282,326,2.282,327,2.282,328,2.282,329,3.103,330,2.282,331,2.282,332,3.103,333,3.103,334,3.103,335,1.785,336,2.282,337,1.901,338,1.901,339,2.282,340,3.103,341,2.282,342,2.282,343,2.282,344,3.103,345,3.668,346,2.282,347,2.282,348,2.585,349,2.585,350,2.282,351,0.983,352,2.493,353,3.434,354,1.715,355,0.987,356,0.983,357,2.278,358,2.278,359,2.734,360,2.734,361,2.278,362,2.734,363,1.715,364,3.072,365,2.734,366,3.409,367,1.715,368,1.715,369,1.715,370,1.715,371,0.983,372,1.24,373,1.715,374,1.429,375,1.715,376,3.889,377,3.889,378,0.983,379,2.734,380,1.715,381,2.734,382,2.278,383,3.889,384,3.889,385,2.734,386,2.734,387,1.715,388,2.734,389,2.734,390,2.734,391,3.889,392,0.983,393,1.977,394,1.901,395,3.539,396,1.715,397,1.715,398,0.983,399,1.715,400,1.429,401,1.715,402,0.983,403,1.715,404,1.429,405,2.734,406,1.715,407,1.313,408,0.983,409,1.1,410,1.429,411,1.429,412,1.24,413,1.977,414,0.983,415,1.715,416,1.715,417,1.977,418,0.983,419,3.889,420,1.429,421,1.715,422,0.983,423,3.889,424,1.715,425,1.715,426,2.278,427,3.889,428,1.463,429,0.983,430,1.977,431,2.278,432,1.429,433,1.429,434,1.715,435,1.715,436,1.715,437,2.84,438,1.715,439,1.429,440,1.715,441,1.715,442,1.715,443,1.715,444,2.84,445,1.715,446,1.715,447,1.715,448,0.983,449,1.715,450,1.715,451,1.715,452,1.715,453,1.715,454,1.715,455,1.1,456,0.983,457,1.715,458,1.715,459,3.409,460,1.429,461,1.715,462,1.429,463,1.715,464,1.715,465,1.313,466,0.983,467,1.901,468,0.983,469,2.278,470,0.983,471,1.313,472,0.983,473,0.983,474,3.409,475,1.715,476,1.715,477,1.715,478,0.983,479,1.715,480,3.409,481,1.429,482,3.24,483,1.715,484,1.715,485,1.715,486,0.983,487,0.983,488,1.715,489,1.715,490,1.715,491,0.983,492,1.429,493,1.715,494,1.715,495,2.734,496,2.734,497,0.983,498,1.715,499,1.715,500,1.429,501,1.715,502,0.983,503,1.715,504,1.24,505,1.715,506,2.444,507,1.24,508,1.715,509,1.429,510,1.715,511,1.715,512,0.983,513,1.715,514,1.715,515,1.715,516,1.715,517,1.429,518,1.715,519,1.24,520,1.715,521,1.715,522,2.734,523,1.715,524,1.715,525,1.463,526,0.983,527,2.278,528,1.429,529,1.715,530,1.715,531,1.715,532,1.715,533,2.84,534,1.715,535,1.715,536,2.278,537,2.278,538,1.429,539,3.24,540,2.278,541,1.715,542,1.715,543,1.715,544,1.429,545,1.715,546,1.715,547,1.901,548,0.983,549,2.734,550,1.715,551,1.715,552,2.278,553,2.84,554,2.84,555,2.278,556,2.278,557,1.715,558,1.715,559,1.715,560,0.983,561,1.715,562,1.429,563,2.734,564,1.715,565,1.24,566,1.715,567,1.715,568,0.983,569,1.715,570,1.715,571,1.429,572,1.429,573,0.983,574,1.715,575,1.715,576,1.24,577,1.715,578,0.983,579,1.715,580,1.715,581,2.278,582,1.715,583,1.715,584,1.715,585,1.715,586,1.715,587,1.901,588,0.983,589,1.429,590,2.278,591,1.429,592,1.24,593,1.429,594,1.715,595,1.429,596,1.715,597,1.715,598,1.901,599,0.983,600,1.715,601,1.715,602,1.429,603,0.983,604,1.715,605,0.983,606,1.715,607,3.409,608,1.715,609,1.429,610,1.715,611,1.715,612,0.983,613,0.983,614,0.983,615,0.983,616,0.983,617,0.983,618,1.715,619,0.819,620,0.983,621,0.983,622,0.983,623,0.819]],["title/modules/NgcCookieConsentModule.html",[624,1.837,625,2.047]],["body/modules/NgcCookieConsentModule.html",[3,0.489,4,0.552,5,0.489,6,0.455,9,0.552,18,0.489,27,0.92,29,0.429,30,0.034,46,2.715,64,0.027,65,0.027,76,1.007,83,0.489,116,2.446,120,2.446,122,2.139,131,2.214,132,1.687,133,1.842,137,2.332,139,1.687,154,1.842,176,1.842,184,2.471,294,2.214,348,4.342,624,2.999,625,3.613,626,2.725,627,3.769,628,4.252,629,4.252,630,5.212,631,4.252,632,5.636,633,4.695,634,5.212,635,3.074,636,4.252,637,2.725,638,3.074,639,4.252,640,3.542,641,3.074,642,3.074]],["title/interfaces/NgcCookieConsentPopup.html",[0,0.279,125,1.663]],["body/interfaces/NgcCookieConsentPopup.html",[0,0.42,2,0.665,3,0.204,4,0.231,5,0.204,6,0.484,9,0.231,18,0.204,19,0.704,26,0.755,27,1.182,29,0.4,30,0.034,57,0.738,58,1.247,59,1.796,60,1.718,61,0.665,62,0.727,63,0.727,64,0.014,65,0.014,72,2.048,74,0.231,76,0.826,77,1.463,83,0.401,109,1.816,110,1.021,111,1.653,112,2.235,113,2.178,114,2.178,115,1.138,116,1.617,117,2.945,120,3.143,121,1.138,122,1.673,123,1.138,124,2.039,125,2.886,126,3.419,127,1.138,128,2.065,131,1.816,132,1.384,133,1.99,136,3.077,137,2.039,138,1.023,139,0.704,140,3.327,141,3.787,142,0.925,143,1.021,144,0.769,145,1.138,146,1.138,147,0.769,148,1.138,149,1.138,150,0.769,151,1.138,152,0.769,153,0.646,154,1.217,155,1.138,156,1.801,157,1.801,158,2.769,159,2.486,160,2.235,161,2.769,162,2.769,163,2.769,164,2.769,165,2.235,166,2.486,167,2.769,168,1.138,169,1.138,170,1.138,171,1.021,172,1.463,173,0.769,174,0.925,175,1.021,176,0.769,177,1.138,178,1.138,179,1.138,180,0.925,181,1.138,182,1.138,183,1.138,184,1.332,185,2.886,186,2.486,187,1.021,188,1.138,189,1.801,190,1.138,191,1.138,192,1.138,193,1.138,194,1.138,195,1.138,196,1.138,197,1.138,198,2.872,199,3.199,200,1.138,201,1.138,202,1.021,203,1.138,204,1.801,205,1.021,206,1.617,207,1.617,208,0.925,209,1.138,210,0.704,211,1.138,212,1.138,213,1.138,214,0.769,215,1.138,216,1.138,217,1.138,218,1.138,219,2.226,220,1.138,221,1.138,222,1.138,223,1.138,224,1.138,225,1.138,226,1.138,227,1.138,228,1.138,229,1.138,230,1.138,231,1.138,232,1.138,233,1.138,234,1.138,235,1.138,236,1.138,237,1.138,238,1.138,239,1.138,240,1.138,241,1.138,242,1.138,243,1.138,244,1.801,245,1.138,246,1.138,247,1.138,248,1.801,249,1.138,250,1.138,251,1.138,252,1.138,253,1.138,254,0.925,255,1.021,256,0.925,257,1.51,258,1.138,259,1.138,260,1.801,261,0.925,262,1.138,263,1.138,264,1.138,265,1.801,266,0.769,267,1.021,268,1.021,269,1.138,270,1.138,271,1.138,272,1.138,273,1.138,274,1.138,275,1.138,276,1.816,277,1.138,278,1.138,279,1.138,280,1.138,281,1.653,282,1.51,283,1.138,284,1.021,285,1.021,286,1.138,287,1.138,288,1.138,289,1.617,290,1.138,291,1.138,292,2.006,293,1.138,294,2.676,295,1.138,296,0.925,297,0.842,298,1.138,299,1.138,300,1.138,301,1.138,302,1.138,303,1.138,304,1.138,305,1.138,306,1.138,307,1.138,308,1.138,309,1.138,310,1.138,311,1.138,312,1.138,313,1.138,314,1.138,315,1.138,316,1.138,317,1.138,318,1.138,319,1.138,320,1.138,321,1.138,643,2.809,644,2.34,645,1.775,646,1.775,647,1.479,648,1.775,649,1.775,650,1.775,651,1.775,652,1.775,653,1.775,654,1.775,655,1.775,656,1.775,657,1.775,658,1.284]],["title/injectables/NgcCookieConsentService.html",[138,1.163,176,1.383]],["body/injectables/NgcCookieConsentService.html",[0,0.361,2,0.334,3,0.162,4,0.183,5,0.162,6,0.533,9,0.303,18,0.162,19,0.925,26,0.83,27,1.319,29,0.349,30,0.034,57,0.771,58,1.33,59,1.745,60,1.462,61,0.552,62,0.603,63,0.603,64,0.012,65,0.012,72,2.073,74,0.183,75,0.417,76,0.908,77,1.214,83,0.67,109,1.803,110,0.811,111,1.105,112,1.494,113,2.168,114,1.959,115,0.903,116,1.341,117,2.648,120,3.095,121,0.903,122,1.865,123,0.903,124,1.989,125,2.717,126,3.306,127,0.903,128,1.803,131,1.997,132,1.522,133,2.171,136,2.972,137,1.882,138,0.849,139,0.559,140,3.366,141,3.906,142,0.734,143,0.811,144,0.61,145,0.903,146,0.903,147,0.61,148,0.903,149,0.903,150,0.61,151,0.903,152,0.61,153,0.513,154,1.661,155,0.903,156,0.903,157,0.903,158,2.458,159,2.207,160,1.91,161,2.458,162,2.458,163,2.458,164,2.458,165,1.91,166,2.207,167,2.458,168,0.903,169,0.903,170,0.903,171,0.811,172,1.214,173,1.01,174,1.214,175,1.341,176,1.01,177,0.903,178,0.903,179,0.903,180,0.734,181,0.903,182,0.903,183,0.903,184,1.105,185,3.197,186,2.729,187,0.811,188,1.91,189,1.494,190,1.91,191,1.91,192,1.91,193,1.91,194,1.91,195,1.91,196,1.91,197,1.91,198,3.134,199,3.491,200,1.494,201,1.91,202,1.341,203,1.91,204,2.458,205,1.341,206,2.207,207,1.715,208,1.214,209,1.91,210,0.925,211,1.91,212,1.494,213,1.91,214,1.01,215,1.494,216,1.91,217,1.494,218,0.903,219,2.054,220,0.903,221,0.903,222,0.903,223,0.903,224,0.903,225,0.903,226,0.903,227,0.903,228,0.903,229,0.903,230,0.903,231,0.903,232,0.903,233,0.903,234,0.903,235,0.903,236,0.903,237,0.903,238,0.903,239,0.903,240,0.903,241,0.903,242,0.903,243,0.903,244,1.494,245,0.903,246,0.903,247,1.494,248,1.494,249,0.903,250,0.903,251,0.903,252,0.903,253,0.903,254,1.214,255,1.341,256,1.214,257,1.79,258,0.903,259,1.494,260,1.494,261,0.734,262,0.903,263,0.903,264,0.903,265,1.494,266,0.61,267,0.811,268,0.811,269,0.903,270,0.903,271,0.903,272,0.903,273,0.903,274,0.903,275,0.903,276,1.552,277,0.903,278,0.903,279,0.903,280,0.903,281,1.413,282,1.291,283,0.903,284,1.715,285,0.811,286,0.903,287,0.903,288,0.903,289,1.341,290,0.903,291,0.903,292,2.377,293,2.219,294,2.47,295,0.903,296,1.214,297,1.105,298,1.494,299,2.219,300,0.903,301,1.494,302,0.903,303,0.903,304,0.903,305,0.903,306,0.903,307,0.903,308,0.903,309,0.903,310,0.903,311,0.903,312,0.903,313,0.903,314,0.903,315,0.903,316,0.903,317,0.903,318,0.903,319,0.903,320,0.903,321,0.903,322,0.903,644,1.942,647,1.174,658,1.019,659,2.331,660,1.019,661,2.331,662,1.409,663,1.409,664,1.409,665,1.409,666,1.409,667,1.409,668,1.409,669,1.409,670,1.409,671,1.409,672,1.409,673,1.409,674,1.409,675,1.409,676,1.409,677,1.409,678,1.409,679,1.409,680,1.409,681,1.409,682,1.409,683,1.409,684,1.409,685,1.409,686,1.409,687,1.409,688,1.409,689,1.409,690,1.409,691,1.409,692,1.409,693,1.409,694,1.409,695,1.409]],["title/interfaces/NgcCookieConsentStatus.html",[0,0.279,60,1.068]],["body/interfaces/NgcCookieConsentStatus.html",[0,0.527,1,1.889,2,0.944,3,0.459,4,0.518,5,0.459,6,0.348,7,2.076,8,2.293,9,0.518,10,2.293,11,2.293,23,2.293,25,2.374,26,1.342,27,0.863,29,0.579,30,0.034,31,1.889,32,1.333,33,2.076,34,2.076,35,2.293,36,2.169,37,2.293,38,1.889,39,1.889,40,2.076,41,1.581,42,1.889,43,1.889,44,2.881,45,3.209,46,2.076,47,1.889,48,2.554,49,2.076,50,2.293,51,2.293,52,2.076,53,2.293,54,1.889,55,1.889,56,3.209,57,0.651,58,1.186,59,1.674,60,1.674,61,1.401,62,1.53,63,1.53,64,0.026,65,0.026,74,0.518,75,0.896,76,1.43]],["title/classes/NgcCookieOptions.html",[18,0.367,407,1.837]],["body/classes/NgcCookieOptions.html",[3,0.414,4,0.467,5,0.414,6,0.513,9,0.467,18,0.414,26,1.129,27,1.241,29,0.363,30,0.034,32,1.202,57,0.789,64,0.024,65,0.024,67,1.557,69,1.704,74,0.467,75,0.839,76,1.467,83,0.636,84,2.658,85,2.717,86,3.771,107,2.994,132,2.332,266,2.03,335,2.068,352,2.304,357,2.994,364,3.389,382,2.994,407,2.697,409,2.304,410,2.994,411,2.994,412,2.599,413,2.599,500,2.994,572,2.994,696,4.896,697,4.896,698,2.994,699,2.994,700,5.214,701,5.526,702,5.731,703,3.594,704,5.214,705,3.594,706,5.214,707,3.594,708,3.594,709,3.594,710,3.594,711,3.594,712,2.994,713,4.686,714,3.904,715,3.594,716,3.594,717,3.594,718,3.594,719,3.594,720,3.594,721,2.994,722,3.594,723,2.994,724,3.594,725,2.599,726,3.594]],["title/classes/NgcHTMLElements.html",[18,0.367,428,2.047]],["body/classes/NgcHTMLElements.html",[3,0.407,4,0.459,5,0.407,6,0.539,9,0.459,14,2.266,18,0.407,24,2.266,25,2.198,26,1.355,27,1.324,29,0.357,30,0.034,41,2.366,61,1.35,62,1.475,63,1.475,64,0.024,65,0.024,67,1.531,73,2.266,74,0.459,75,0.83,76,1.509,77,2.969,78,2.977,80,3.822,83,0.696,84,2.62,85,2.868,108,3.862,428,2.972,576,3.741,727,5.144,728,2.945,729,3.535,730,4.636,731,3.535,732,3.535,733,4.636,734,3.535,735,3.535,736,3.535,737,3.535]],["title/interfaces/NgcHasCookieConsent.html",[0,0.279,172,1.663]],["body/interfaces/NgcHasCookieConsent.html",[0,0.437,2,0.723,3,0.227,4,0.256,5,0.227,6,0.172,9,0.256,18,0.227,19,0.783,26,0.808,29,0.424,30,0.034,57,0.754,58,1.285,59,1.814,60,1.606,61,0.723,62,0.789,63,0.789,64,0.016,65,0.016,72,2.276,74,0.256,75,0.546,83,0.227,109,2.365,110,1.135,111,1.447,112,1.956,113,2.571,114,2.276,115,1.265,117,2.392,121,1.265,122,1.748,123,1.265,124,2.107,125,2.825,126,3.337,127,1.265,128,2.187,133,2.08,136,2.958,137,2.107,138,1.111,139,0.783,140,3.393,141,3.851,142,1.027,143,1.135,144,0.855,145,1.265,146,1.265,147,0.855,148,1.265,149,1.265,150,0.855,151,1.265,152,0.855,153,0.718,154,1.322,155,1.265,156,1.265,157,1.265,158,1.956,159,1.756,160,1.956,161,1.956,162,1.956,163,1.956,164,1.956,165,1.956,166,1.756,167,1.956,168,1.956,169,1.956,170,1.956,171,1.756,172,1.944,173,0.855,174,1.027,175,1.135,176,0.855,177,1.265,178,1.265,179,1.265,180,1.027,181,1.265,182,1.265,183,1.265,184,1.447,185,2.958,186,2.613,187,1.135,188,1.265,189,1.956,190,1.265,191,1.265,192,1.265,193,1.265,194,1.265,195,1.265,196,1.265,197,1.265,198,2.976,199,3.316,200,1.265,201,1.265,202,1.135,203,1.265,204,1.956,205,1.135,206,1.756,207,1.756,208,1.027,209,1.265,210,0.783,211,1.265,212,1.265,213,1.265,214,0.855,215,1.265,216,1.265,217,1.265,218,1.265,219,2.3,220,1.265,221,1.265,222,1.265,223,1.265,224,1.265,225,1.265,226,1.265,227,1.265,228,1.265,229,1.265,230,1.265,231,1.265,232,1.265,233,1.265,234,1.265,235,1.265,236,1.265,237,1.265,238,1.265,239,1.265,240,1.265,241,1.265,242,1.265,243,1.265,244,1.956,245,1.265,246,1.265,247,1.265,248,1.956,249,1.265,250,1.265,251,1.265,252,1.265,253,1.265,254,1.027,255,1.135,256,1.027,257,1.616,258,1.265,259,1.265,260,1.956,261,1.027,262,1.265,263,1.265,264,1.265,265,1.956,266,0.855,267,1.135,268,1.135,269,1.265,270,1.265,271,1.265,272,1.265,273,1.265,274,1.265,275,1.265,276,1.944,277,1.265,278,1.265,279,1.265,280,1.265,281,1.769,282,1.616,283,1.265,284,1.135,285,1.135,286,1.265,287,1.265,288,1.265,289,1.756,290,1.265,291,1.265,292,2.147,293,1.265,294,2.765,295,1.265,296,1.027,297,0.935,298,1.265,299,1.265,300,1.265,301,1.265,302,1.265,303,1.265,304,1.265,305,1.265,306,1.265,307,1.265,308,1.265,309,1.265,310,1.265,311,1.265,312,1.265,313,1.265,314,1.265,315,1.265,316,1.265,317,1.265,318,1.265,319,1.265,320,1.265,321,1.265]],["title/interfaces/NgcInitializationErrorEvent.html",[0,0.279,152,1.383]],["body/interfaces/NgcInitializationErrorEvent.html",[0,0.403,2,1.093,3,0.531,4,0.6,5,0.531,6,0.403,9,0.6,29,0.466,30,0.033,57,0.6,58,1.093,64,0.028,65,0.028,74,0.6,75,0.981,83,0.531,128,3.353,152,2.372,153,1.68,289,3.36,609,4.865,738,3.844,739,3.844,740,2.958,741,5.839]],["title/interfaces/NgcInitializingEvent.html",[0,0.279,150,1.383]],["body/interfaces/NgcInitializingEvent.html",[0,0.398,2,1.079,3,0.524,4,0.592,5,0.524,6,0.398,9,0.592,29,0.46,30,0.034,57,0.755,58,1.376,59,2.085,61,1.376,62,1.502,63,1.502,64,0.028,65,0.028,74,0.592,75,0.973,83,0.524,150,2.354,153,1.659,255,2.622,740,2.921,742,3.796]],["title/classes/NgcLawOptions.html",[18,0.367,465,1.837]],["body/classes/NgcLawOptions.html",[3,0.502,4,0.567,5,0.502,6,0.497,9,0.567,18,0.502,26,1.146,27,1.146,29,0.44,30,0.033,52,2.273,57,0.567,64,0.027,65,0.027,67,1.89,69,2.068,74,0.567,75,0.948,76,1.404,83,0.502,84,2.294,85,2.068,104,3.155,124,1.731,214,2.294,281,2.703,282,2.568,335,2.511,352,3.654,364,3.155,417,3.155,439,3.635,455,3.394,465,3.047,743,4.749,744,4.363,745,5.701,746,4.363,747,2.797,748,3.155,749,4.363,750,3.635,751,4.363,752,4.363]],["title/interfaces/NgcLayouts.html",[0,0.279,55,1.514]],["body/interfaces/NgcLayouts.html",[0,0.515,1,1.872,2,0.935,3,0.454,4,0.513,5,0.454,6,0.434,7,2.593,8,2.272,9,0.513,10,2.864,11,2.864,23,2.864,24,2.531,25,2.584,26,1.361,27,1.077,29,0.577,30,0.034,31,1.872,32,1.32,33,2.057,34,2.057,35,2.272,36,2.361,37,2.272,38,1.872,39,1.872,40,2.057,41,1.567,42,1.872,43,2.36,44,3.294,45,3.669,46,2.593,47,2.36,48,3.191,49,2.593,50,2.864,51,2.864,52,2.593,53,2.864,54,2.36,55,2.36,56,2.531,57,0.513,58,0.935,59,1.32,60,1.32,61,1.179,62,1.288,63,1.288,64,0.026,65,0.026,753,3.948]],["title/classes/NgcLocationOptions.html",[18,0.367,471,1.837]],["body/classes/NgcLocationOptions.html",[3,0.348,4,0.393,5,0.348,6,0.45,9,0.393,18,0.348,19,1.657,25,2.266,26,0.655,27,1.035,29,0.305,30,0.033,32,1.723,36,1.31,49,2.174,50,2.402,57,0.542,64,0.021,65,0.021,67,1.31,69,1.434,74,0.393,75,0.856,76,1.324,83,0.593,84,2.482,85,1.979,87,2.52,111,1.434,114,1.434,124,2.045,173,2.624,210,1.657,214,1.808,219,2.232,256,1.576,257,1.31,266,2.071,282,2.422,335,2.966,352,1.939,393,3.727,400,3.478,404,3.478,409,2.676,413,2.188,417,2.188,420,3.478,437,3.478,444,3.478,455,3.584,462,4.293,471,2.402,492,3.478,504,3.019,506,2.966,528,2.52,565,3.457,571,2.52,623,2.52,624,2.402,725,3.019,748,4.612,754,4.293,755,3.025,756,3.025,757,3.025,758,2.52,759,2.52,760,2.188,761,3.025,762,5.407,763,5.407,764,3.025,765,3.025,766,4.175,767,4.175,768,4.175,769,4.175,770,4.175,771,4.175,772,5.154,773,5.154,774,5.154,775,3.025,776,4.175,777,4.175,778,4.175,779,4.175,780,5.154,781,4.175,782,3.478,783,4.175,784,4.175,785,4.175,786,4.175,787,4.175,788,5.154,789,4.175,790,4.175,791,4.175,792,4.175,793,4.175,794,3.478,795,4.175,796,4.175,797,4.175]],["title/interfaces/NgcNoCookieLawEvent.html",[0,0.279,147,1.383]],["body/interfaces/NgcNoCookieLawEvent.html",[0,0.395,2,1.072,3,0.521,4,0.588,5,0.521,6,0.395,9,0.588,26,1.348,29,0.457,30,0.033,57,0.704,64,0.028,65,0.028,74,0.588,75,0.969,83,0.623,147,2.345,153,1.649,214,1.961,281,2.845,282,2.767,455,3.471,740,2.902,798,3.772,799,3.772,800,4.528]],["title/interfaces/NgcPalette.html",[0,0.279,38,1.514]],["body/interfaces/NgcPalette.html",[0,0.51,1,1.809,2,0.904,3,0.439,4,0.496,5,0.439,6,0.333,7,1.988,8,2.196,9,0.496,10,2.196,11,2.196,23,2.196,25,2.309,26,1.391,27,1.054,29,0.57,30,0.034,31,2.309,32,1.629,33,2.537,34,2.537,35,2.803,36,2.324,37,2.803,38,2.309,39,2.68,40,2.944,41,2.243,42,2.68,43,1.809,44,2.803,45,3.122,46,1.988,47,1.809,48,2.446,49,1.988,50,2.196,51,2.196,52,1.988,53,2.196,54,1.809,55,1.809,56,2.446,57,0.496,58,0.904,59,1.276,60,1.276,61,1.154,62,1.26,63,1.26,64,0.025,65,0.025,74,0.496,75,0.872,76,1.456,83,0.651]],["title/classes/NgcPaletteOptions.html",[18,0.367,525,2.047]],["body/classes/NgcPaletteOptions.html",[2,0.904,3,0.439,4,0.496,5,0.439,6,0.493,9,0.496,18,0.439,27,1.264,29,0.385,30,0.034,31,2.309,32,1.629,33,2.537,34,2.537,35,2.803,36,2.11,37,2.803,38,2.878,39,2.831,40,2.944,41,1.933,42,2.831,64,0.025,65,0.025,67,1.653,69,1.809,74,0.496,75,0.872,76,1.415,83,0.618,84,2.324,85,2.544,92,3.179,94,3.179,104,2.759,124,2.129,137,1.514,353,3.88,525,3.122,536,4.709,537,4.709,538,4.058,539,5.12,540,4.47,801,4.709,802,3.816]],["title/interfaces/NgcStatusChangeEvent.html",[0,0.279,144,1.383]],["body/interfaces/NgcStatusChangeEvent.html",[0,0.376,2,1.021,3,0.496,4,0.56,5,0.496,6,0.376,9,0.56,29,0.435,30,0.034,57,0.737,58,1.245,59,2.119,61,1.343,62,1.467,63,1.467,64,0.027,65,0.027,74,0.56,75,0.941,83,0.605,136,2.954,144,2.277,153,1.57,210,1.711,219,2.557,276,3.075,481,4.379,723,4.379,740,2.763,803,3.591,804,3.591,805,5.256,806,5.256]],["title/injectables/WindowService.html",[138,1.163,154,1.383]],["body/injectables/WindowService.html",[3,0.498,4,0.562,5,0.498,6,0.496,9,0.562,18,0.498,27,1.14,29,0.437,30,0.033,64,0.027,65,0.027,72,2.693,74,0.562,76,1.025,83,0.498,114,2.498,131,2.254,132,1.718,137,2.091,138,1.919,139,1.718,154,2.282,173,2.282,174,2.744,185,2.254,294,2.254,322,2.774,412,3.81,432,4.39,635,3.13,660,3.13,807,3.606,808,5.269,809,5.269,810,5.681,811,4.328,812,5.912,813,4.328,814,5.269,815,4.328,816,4.328,817,3.606,818,4.328,819,4.328]],["title/changelog.html",[747,1.717,820,1.937,821,2.679]],["body/changelog.html",[29,0.333,30,0.026,32,1.482,47,1.566,54,1.566,57,0.576,58,0.782,60,1.104,61,1.185,64,0.023,65,0.023,66,1.9,70,2.117,77,2.308,81,3.205,82,2.751,113,1.566,128,1.72,133,1.431,173,1.431,202,3.51,208,1.72,210,1.311,254,1.72,257,1.431,261,2.605,297,2.371,335,2.55,337,2.751,338,3.692,407,1.9,465,1.9,471,1.9,519,3.205,619,3.692,712,2.751,748,2.388,760,4.15,822,3.303,823,5.575,824,4.431,825,5.001,826,5.959,827,3.303,828,3.303,829,5.345,830,3.303,831,3.303,832,3.303,833,4.431,834,4.431,835,5.575,836,5.575,837,3.303,838,3.303,839,3.303,840,4.431,841,5.001,842,3.303,843,3.303,844,3.303,845,3.303,846,3.303,847,3.303,848,3.303,849,3.303,850,3.303,851,3.303,852,3.303,853,3.303,854,3.303,855,4.431,856,3.303,857,3.303,858,3.205,859,3.303,860,3.303,861,3.303,862,3.303,863,3.303,864,4.431,865,3.303,866,3.303,867,3.205,868,3.303,869,3.865,870,3.303,871,2.751,872,3.692,873,4.453,874,3.303,875,3.303,876,3.303,877,3.303,878,3.303,879,5.345,880,4.431,881,4.431,882,2.751,883,3.303,884,3.303,885,4.431,886,3.303,887,3.303,888,4.431,889,3.205,890,2.751,891,3.303,892,3.303,893,3.303,894,3.303,895,3.303,896,3.303,897,3.303,898,3.303,899,4.644,900,3.303,901,3.303,902,3.303,903,3.303,904,3.303,905,3.303,906,3.303,907,3.303,908,3.303,909,2.751,910,2.751,911,3.303,912,3.303,913,3.303,914,4.431,915,3.303,916,2.751,917,3.303,918,2.751,919,3.303,920,3.303,921,2.751,922,3.303,923,3.303,924,3.303,925,3.303,926,3.303,927,2.751,928,3.303,929,3.303,930,3.303,931,3.303,932,3.303,933,3.303,934,3.303]],["title/coverage.html",[935,3.608]],["body/coverage.html",[0,0.545,1,1.721,5,0.418,6,0.565,7,2.889,8,3.192,18,0.678,30,0.033,38,1.721,55,1.721,57,0.472,60,1.214,64,0.024,65,0.024,66,2.089,68,3.024,69,2.726,83,0.418,109,1.891,110,3.192,122,1.322,125,1.891,134,2.625,138,1.908,144,1.572,147,1.572,150,1.572,152,1.572,154,1.572,172,1.891,176,1.572,219,1.572,323,3.024,324,3.024,407,2.089,428,2.327,465,2.089,471,2.089,525,2.327,627,2.625,637,2.327,696,3.024,727,3.024,728,3.024,738,3.024,739,3.024,742,3.024,743,3.024,754,3.024,798,3.024,799,3.024,801,3.024,803,3.024,804,3.024,807,3.024,867,2.625,871,3.93,935,3.024,936,2.625,937,3.63,938,3.63,939,6.083,940,4.717,941,4.717,942,5.24,943,4.717,944,4.717,945,4.717,946,3.63,947,3.63,948,3.63,949,3.63,950,3.63,951,3.63,952,3.63,953,3.63,954,3.024,955,3.63,956,3.63,957,3.63,958,3.63,959,3.63,960,3.63,961,4.717,962,4.717,963,3.63,964,3.024]],["title/dependencies.html",[965,2.232,966,2.206]],["body/dependencies.html",[30,0.034,64,0.026,65,0.026,113,1.925,139,1.611,142,2.115,296,2.638,635,2.936,638,4.302,872,3.382,966,2.336,967,4.06,968,6.274,969,4.06,970,4.06,971,4.06,972,5.065,973,4.06,974,4.06,975,4.06,976,4.06,977,4.06,978,4.06,979,5.521,980,5.521,981,5.065,982,4.06,983,5.065,984,4.06,985,4.06,986,4.06,987,3.663,988,5.521,989,3.382,990,4.06,991,4.06,992,4.06,993,4.06,994,4.06,995,4.06,996,4.06,997,4.06,998,4.06,999,4.06,1000,4.06,1001,4.06,1002,4.06,1003,4.06,1004,4.06,1005,4.06,1006,4.06,1007,4.06,1008,4.06,1009,4.06,1010,4.06,1011,4.06,1012,4.06,1013,4.06,1014,4.06,1015,4.06]],["title/miscellaneous/functions.html",[507,2.772,1016,1.717]],["body/miscellaneous/functions.html",[6,0.417,30,0.031,64,0.029,65,0.029,74,0.621,76,1.132,83,0.55,120,2.749,122,2.035,131,2.489,132,1.896,133,2.07,184,2.265,372,3.455,506,2.749,507,3.455,627,3.455,637,3.583,642,3.455,954,4.656,966,2.749,1016,3.063,1017,4.778,1018,3.98,1019,4.778,1020,3.98,1021,4.778]],["title/index.html",[74,0.348,747,1.717,820,1.937]],["body/index.html",[14,1.671,18,0.475,19,0.642,29,0.416,30,0.034,31,1.236,32,0.541,36,1.91,39,1.782,41,0.642,43,1.236,44,0.93,46,1.707,47,2.425,49,1.958,54,0.767,57,0.73,58,1.18,61,0.618,62,0.418,63,0.418,64,0.013,65,0.013,69,0.767,70,2.41,73,2.643,78,0.93,80,2.41,81,2.718,83,0.3,84,1.628,86,3.353,90,1.347,93,2.73,97,1.347,98,1.886,100,1.347,101,1.169,102,1.347,103,1.347,111,0.767,113,2.756,116,1.5,122,0.95,124,1.3,132,0.642,133,1.419,137,2.114,139,1.035,142,0.842,144,0.7,147,0.7,150,0.7,152,0.7,153,1.369,166,0.93,173,0.7,174,0.842,175,1.5,176,1.628,180,0.842,184,1.782,185,2.595,198,1.5,205,0.93,206,0.93,207,0.93,208,0.842,210,0.642,219,0.7,254,0.842,257,0.7,261,2.664,266,1.13,284,1.5,285,0.93,292,0.93,297,1.553,349,2.172,353,1.886,355,1.5,358,1.347,361,1.347,372,2.718,393,1.886,395,2.172,409,1.036,426,2.172,430,1.169,431,1.347,433,1.347,460,2.172,469,3.672,482,1.347,504,1.169,506,2.776,509,1.347,517,1.347,519,2.37,527,4.261,533,1.347,544,1.347,562,1.347,565,2.37,576,1.169,581,2.172,590,1.347,592,1.886,595,1.347,602,2.172,624,2.163,625,2.643,626,1.036,633,3.132,637,1.036,638,4.065,640,2.73,641,1.169,642,1.169,658,1.169,660,1.169,697,3.132,699,2.172,714,1.347,725,1.169,759,1.347,760,1.886,794,1.347,817,1.347,858,2.718,869,1.169,873,2.172,889,1.886,890,1.347,899,1.347,909,3.435,910,3.672,916,1.347,918,1.347,921,3.132,927,1.347,936,1.169,964,1.347,966,0.93,987,2.37,989,1.347,1018,1.347,1020,2.172,1022,1.617,1023,1.347,1024,1.617,1025,3.277,1026,2.608,1027,1.617,1028,1.347,1029,1.617,1030,1.617,1031,1.617,1032,1.617,1033,4.123,1034,1.617,1035,5.328,1036,2.608,1037,2.608,1038,2.608,1039,1.617,1040,4.123,1041,1.617,1042,3.277,1043,1.617,1044,2.608,1045,1.617,1046,1.617,1047,3.759,1048,3.277,1049,3.277,1050,1.617,1051,1.617,1052,1.617,1053,1.617,1054,3.277,1055,2.608,1056,2.608,1057,1.617,1058,1.617,1059,2.608,1060,2.608,1061,2.172,1062,1.617,1063,1.617,1064,1.617,1065,1.617,1066,1.617,1067,1.617,1068,1.617,1069,2.73,1070,4.825,1071,2.608,1072,2.608,1073,2.608,1074,1.617,1075,1.617,1076,1.617,1077,2.608,1078,4.637,1079,1.617,1080,1.617,1081,2.608,1082,1.617,1083,1.617,1084,2.608,1085,1.617,1086,2.608,1087,4.408,1088,1.617,1089,1.617,1090,3.277,1091,2.608,1092,4.981,1093,2.608,1094,2.608,1095,2.608,1096,2.608,1097,2.608,1098,2.608,1099,1.617,1100,1.617,1101,1.617,1102,1.617,1103,2.608,1104,1.617,1105,1.617,1106,1.617,1107,1.617,1108,1.617,1109,1.617,1110,1.617,1111,1.617,1112,1.617,1113,2.608,1114,2.608,1115,2.608,1116,2.608,1117,1.617,1118,1.617,1119,4.123,1120,1.617,1121,1.617,1122,1.617,1123,1.617,1124,1.617,1125,2.608,1126,1.617,1127,1.617,1128,2.608,1129,1.617,1130,1.617,1131,1.617,1132,1.617,1133,1.617,1134,1.617,1135,1.617,1136,1.617,1137,1.617,1138,1.617,1139,1.617,1140,1.617,1141,1.617,1142,1.617,1143,1.617,1144,1.617,1145,1.617,1146,1.617,1147,1.617,1148,1.617,1149,1.617,1150,1.617,1151,1.617,1152,1.617,1153,1.617,1154,1.617,1155,2.608,1156,1.617,1157,1.617,1158,1.617,1159,1.617,1160,1.617,1161,3.277,1162,1.617,1163,1.617,1164,1.347,1165,1.617,1166,1.617,1167,1.617,1168,1.617,1169,1.617,1170,1.347,1171,1.617,1172,2.608,1173,1.617,1174,1.617,1175,1.617,1176,1.617,1177,1.617,1178,1.617,1179,1.617,1180,1.617,1181,1.617,1182,2.608,1183,1.617,1184,1.617,1185,1.617,1186,1.617,1187,1.617,1188,1.617,1189,1.617,1190,1.617,1191,1.617,1192,1.617,1193,1.617,1194,1.617,1195,2.608,1196,1.617,1197,1.617,1198,1.617,1199,1.617,1200,1.617,1201,1.617,1202,1.617,1203,1.617,1204,1.617,1205,1.617,1206,1.617,1207,1.617,1208,1.617,1209,1.617,1210,1.617,1211,1.617,1212,1.617,1213,1.617,1214,1.617,1215,1.617,1216,1.617,1217,1.617,1218,1.617,1219,1.617,1220,1.617,1221,1.617,1222,1.617,1223,1.617,1224,1.617,1225,2.608,1226,1.617,1227,2.608,1228,1.617,1229,1.617,1230,1.617,1231,2.608,1232,2.608,1233,2.608,1234,1.617,1235,1.617,1236,1.617,1237,1.617,1238,1.617,1239,1.617,1240,1.617,1241,1.617,1242,1.617,1243,1.617,1244,1.617,1245,2.608,1246,1.617,1247,1.617,1248,1.617,1249,1.617,1250,1.617,1251,1.617,1252,1.617,1253,1.617,1254,1.617,1255,1.617,1256,1.617,1257,1.617,1258,1.617,1259,1.617,1260,1.617,1261,1.617,1262,1.617,1263,1.617,1264,1.617,1265,1.671,1266,1.347,1267,1.347,1268,1.347,1269,1.347,1270,1.347,1271,1.617,1272,1.617,1273,1.886]],["title/license.html",[747,1.717,820,1.937,1265,1.717]],["body/license.html",[30,0.027,64,0.027,65,0.027,140,2.399,153,1.518,256,2.172,355,2.399,374,3.473,430,3.015,506,2.963,698,3.473,750,3.473,758,3.473,782,4.655,869,3.015,936,3.015,1023,3.473,1164,3.473,1170,3.473,1265,2.673,1266,4.655,1267,3.473,1268,3.473,1269,3.473,1270,3.473,1273,3.724,1274,5.15,1275,4.169,1276,4.169,1277,4.169,1278,4.169,1279,4.169,1280,5.15,1281,6.302,1282,4.169,1283,4.169,1284,4.169,1285,5.15,1286,4.169,1287,4.169,1288,4.169,1289,4.169,1290,4.169,1291,4.169,1292,4.169,1293,4.169,1294,4.169,1295,5.15,1296,4.169,1297,4.169,1298,4.169,1299,4.169,1300,5.15,1301,5.15,1302,4.169,1303,4.169,1304,4.169,1305,4.169,1306,4.169,1307,4.169,1308,4.169,1309,4.169,1310,4.169,1311,4.169,1312,4.169,1313,4.169,1314,4.169,1315,4.169,1316,4.169,1317,4.169,1318,4.169,1319,4.169,1320,4.169,1321,4.169,1322,4.169,1323,4.169,1324,4.169,1325,4.169]],["title/modules.html",[626,2.777]],["body/modules.html",[30,0.03,64,0.03,65,0.03,589,4.204,625,3.234,626,3.234,1326,5.046,1327,5.046]],["title/overview.html",[1328,3.608]],["body/overview.html",[2,1.155,30,0.029,64,0.029,65,0.029,67,2.112,322,3.125,355,2.805,624,3.254,641,3.525,721,4.061,867,3.525,882,4.061,966,2.805,987,3.525,1028,4.061,1069,4.061,1328,4.061,1329,4.875,1330,4.875,1331,5.655,1332,4.875]],["title/properties.html",[75,0.686,965,2.232]],["body/properties.html",[30,0.032,64,0.03,65,0.03,75,0.897,889,3.623,1265,3.212,1273,3.623,1333,5.011,1334,5.011]],["title/miscellaneous/typealiases.html",[1016,1.717,1335,3.833]],["body/miscellaneous/typealiases.html",[3,0.594,6,0.365,7,2.18,26,0.906,30,0.033,43,1.984,57,0.78,64,0.027,65,0.027,74,0.544,77,2.18,78,2.409,83,0.704,111,2.654,355,2.97,394,3.487,467,4.3,547,4.3,552,3.487,553,4.663,554,4.663,555,4.3,556,4.3,587,4.3,591,3.487,592,3.027,593,3.487,598,4.3,858,4.34,1016,2.683,1061,4.868,1336,4.186,1337,5.162,1338,6.002,1339,6.113,1340,6.002,1341,4.186,1342,4.186]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":584,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["0.0.0",{"_index":1333,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["0.14.3",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["000",{"_index":1059,"title":{},"body":{"index.html":{}}}],["000000",{"_index":536,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{}}}],["02",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["02496e8",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["02ada28",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":721,"title":{},"body":{"classes/NgcCookieOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":867,"title":{},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["14",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["14/37",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["15.0.0",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["16.0.0",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["17.0.8",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["17.2.8",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["2.11.6",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["2.2.2",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["2.2.3",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["2017",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":869,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["2019",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":871,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["27ebb55",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["2ab9341",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["2d960c8",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1028,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.1.0",{"_index":1031,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["306fe18",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["36/37",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":704,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["37",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["37371b6",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["49",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["4b32ce0",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["4fb02eb",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["5.3.2",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":788,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["5000ms",{"_index":796,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["53",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["5f8a340",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":882,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.4.2",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["6cd260f",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["97",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["971b65e",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["9835145",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["_blank",{"_index":106,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["_doc",{"_index":814,"title":{},"body":{"injectables/WindowService.html":{}}}],["a0849f2",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":430,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{},"license.html":{}}}],["accessors",{"_index":809,"title":{},"body":{"injectables/WindowService.html":{}}}],["acknowledge",{"_index":1235,"title":{},"body":{"index.html":{}}}],["action",{"_index":1023,"title":{},"body":{"index.html":{},"license.html":{}}}],["activating",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":768,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["add",{"_index":760,"title":{},"body":{"classes/NgcLocationOptions.html":{},"changelog.html":{},"index.html":{}}}],["added",{"_index":180,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["additional",{"_index":34,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["adds",{"_index":557,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["aliases",{"_index":1336,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":61,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{}}}],["allows",{"_index":514,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["already",{"_index":483,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["and/or",{"_index":1293,"title":{},"body":{"license.html":{}}}],["anglar",{"_index":1166,"title":{},"body":{"index.html":{}}}],["angular",{"_index":261,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["angular.json",{"_index":1045,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":635,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"injectables/WindowService.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":139,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":582,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["animaterevokable",{"_index":325,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["animation",{"_index":494,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["another",{"_index":453,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["answer",{"_index":795,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["anything",{"_index":424,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["api",{"_index":175,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["app",{"_index":519,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{},"index.html":{}}}],["app.component.html",{"_index":1096,"title":{},"body":{"index.html":{}}}],["app.component.scss",{"_index":1098,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":1070,"title":{},"body":{"index.html":{}}}],["appearance",{"_index":1216,"title":{},"body":{"index.html":{}}}],["appended",{"_index":359,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["applicable",{"_index":215,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["application",{"_index":372,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["apply",{"_index":543,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["appmodule",{"_index":1072,"title":{},"body":{"index.html":{}}}],["apps",{"_index":1048,"title":{},"body":{"index.html":{}}}],["aria",{"_index":438,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["arising",{"_index":1323,"title":{},"body":{"license.html":{}}}],["array",{"_index":462,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["assets",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1282,"title":{},"body":{"license.html":{}}}],["attach",{"_index":365,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["attempt",{"_index":776,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["attributes",{"_index":37,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["authors",{"_index":1315,"title":{},"body":{"license.html":{}}}],["autoattach",{"_index":326,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["autodismiss",{"_index":421,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["automatically",{"_index":358,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["autoopen",{"_index":327,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["available",{"_index":589,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"modules.html":{}}}],["background",{"_index":39,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["bad",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["banner",{"_index":459,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["bar",{"_index":858,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":1047,"title":{},"body":{"index.html":{}}}],["basic",{"_index":111,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["basically",{"_index":1162,"title":{},"body":{"index.html":{}}}],["before",{"_index":806,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["behaviour",{"_index":362,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["belongs",{"_index":713,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["below",{"_index":426,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["best",{"_index":102,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["better",{"_index":1218,"title":{},"body":{"index.html":{}}}],["between",{"_index":49,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["blacklist",{"_index":380,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["blacklistpage",{"_index":328,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["block",{"_index":591,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":136,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["bootstrap",{"_index":987,"title":{},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["bootstrapapplication(appcomponent",{"_index":1065,"title":{},"body":{"index.html":{}}}],["border",{"_index":40,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["both",{"_index":608,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["bottom",{"_index":554,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["brands",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["breaking",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1327,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":296,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"dependencies.html":{}}}],["browserlang",{"_index":1182,"title":{},"body":{"index.html":{}}}],["btn",{"_index":518,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["bug",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1041,"title":{},"body":{"index.html":{}}}],["built",{"_index":44,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["button",{"_index":353,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["buttons",{"_index":23,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["c",{"_index":1267,"title":{},"body":{"index.html":{},"license.html":{}}}],["calculated",{"_index":546,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["call",{"_index":1081,"title":{},"body":{"index.html":{}}}],["callback",{"_index":619,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{}}}],["callbacks",{"_index":267,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["called",{"_index":54,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"changelog.html":{},"index.html":{}}}],["can't",{"_index":789,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["cc",{"_index":17,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{}}}],["ccservice",{"_index":1114,"title":{},"body":{"index.html":{}}}],["certain",{"_index":620,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["change",{"_index":563,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["change.event",{"_index":146,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["change.event.ts",{"_index":804,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{},"coverage.html":{}}}],["changed",{"_index":503,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["changelog",{"_index":821,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":210,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":1277,"title":{},"body":{"license.html":{}}}],["checkpopupinstantiated",{"_index":659,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["checkpopupinstantiated(method",{"_index":247,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["children",{"_index":607,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["choice",{"_index":500,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["chosen",{"_index":481,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["chosenbefore",{"_index":276,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["claim",{"_index":1318,"title":{},"body":{"license.html":{}}}],["class",{"_index":18,"title":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{}},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":67,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"overview.html":{}}}],["classic",{"_index":593,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["clean",{"_index":489,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["clears",{"_index":301,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["clearstatus",{"_index":158,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cli",{"_index":921,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["click",{"_index":423,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["clicks",{"_index":498,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["clipboard",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["close",{"_index":77,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcHTMLElements.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["close(showrevoke",{"_index":160,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["closed",{"_index":488,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["closes",{"_index":202,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{}}}],["closing",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":455,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["color",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["colors",{"_index":545,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["colours",{"_index":33,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["colours/themes",{"_index":531,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["commands",{"_index":490,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["commit",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":802,"title":{},"body":{"classes/NgcPaletteOptions.html":{}}}],["commonmodule",{"_index":634,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["compatibility",{"_index":1025,"title":{},"body":{"index.html":{}}}],["compiling",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":1175,"title":{},"body":{"index.html":{}}}],["compliance",{"_index":10,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["compliances",{"_index":1341,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["component",{"_index":1078,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1299,"title":{},"body":{"license.html":{}}}],["config",{"_index":133,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["config.ts",{"_index":324,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"coverage.html":{}}}],["config.ts:103",{"_index":578,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:118",{"_index":526,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:124",{"_index":560,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:128",{"_index":351,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:134",{"_index":573,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:139",{"_index":414,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:144",{"_index":418,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:150",{"_index":371,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:160",{"_index":356,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:165",{"_index":473,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:173",{"_index":603,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:180",{"_index":378,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:188",{"_index":512,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:193",{"_index":466,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:198",{"_index":472,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:203",{"_index":422,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:209",{"_index":456,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:216",{"_index":491,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:22",{"_index":448,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:221",{"_index":487,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:226",{"_index":478,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:231",{"_index":502,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:236",{"_index":497,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:238",{"_index":486,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:26",{"_index":398,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:31",{"_index":408,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:36",{"_index":402,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:44",{"_index":429,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:51",{"_index":605,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:57",{"_index":568,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:62",{"_index":392,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:68",{"_index":599,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:73",{"_index":470,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:78",{"_index":468,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:87",{"_index":548,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["config.ts:97",{"_index":588,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["configuration",{"_index":257,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"changelog.html":{},"index.html":{}}}],["configurator",{"_index":597,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["configure",{"_index":565,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["connection",{"_index":1324,"title":{},"body":{"license.html":{}}}],["consent",{"_index":58,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"index.html":{}}}],["consented",{"_index":484,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["console.log(`initializationerror",{"_index":1136,"title":{},"body":{"index.html":{}}}],["console.log(`initialized",{"_index":1133,"title":{},"body":{"index.html":{}}}],["console.log(`initializing",{"_index":1127,"title":{},"body":{"index.html":{}}}],["const",{"_index":1054,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":660,"title":{},"body":{"injectables/NgcCookieConsentService.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["constructor(@inject(document",{"_index":818,"title":{},"body":{"injectables/WindowService.html":{}}}],["constructor(_doc",{"_index":811,"title":{},"body":{"injectables/WindowService.html":{}}}],["constructor(private",{"_index":1113,"title":{},"body":{"index.html":{}}}],["constructor(windowservice",{"_index":217,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["container",{"_index":329,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["contains",{"_index":13,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["content",{"_index":70,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{},"index.html":{}}}],["contract",{"_index":1321,"title":{},"body":{"license.html":{}}}],["control",{"_index":376,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["controls",{"_index":441,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["cookie",{"_index":57,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cookie.allow",{"_index":1190,"title":{},"body":{"index.html":{}}}],["cookie.deny",{"_index":1191,"title":{},"body":{"index.html":{}}}],["cookie.dismiss",{"_index":1189,"title":{},"body":{"index.html":{}}}],["cookie.domainoption",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["cookie.link",{"_index":1192,"title":{},"body":{"index.html":{}}}],["cookie.message",{"_index":1188,"title":{},"body":{"index.html":{}}}],["cookie.policy",{"_index":1193,"title":{},"body":{"index.html":{}}}],["cookieconfig:ngccookieconsentconfig",{"_index":1055,"title":{},"body":{"index.html":{}}}],["cookieconsent",{"_index":113,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.config",{"_index":639,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["cookieconsent.config.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["cookieconsent.factory(options",{"_index":369,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["cookieconsent.js",{"_index":183,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cookieconsent.law",{"_index":566,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["cookieconsent.module.ts",{"_index":628,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["cookieconsent.module.ts:16",{"_index":631,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["cookieconsent.popup",{"_index":156,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["cookieconsent/src/lib/event/initialization",{"_index":738,"title":{},"body":{"interfaces/NgcInitializationErrorEvent.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/event/initializing.event.ts",{"_index":742,"title":{},"body":{"interfaces/NgcInitializingEvent.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/event/no",{"_index":798,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/event/status",{"_index":803,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/common",{"_index":7,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cookieconsent/src/lib/model/content",{"_index":68,"title":{},"body":{"classes/NgcContentOptions.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/cookie",{"_index":696,"title":{},"body":{"classes/NgcCookieOptions.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/html",{"_index":727,"title":{},"body":{"classes/NgcHTMLElements.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/law",{"_index":743,"title":{},"body":{"classes/NgcLawOptions.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/location",{"_index":754,"title":{},"body":{"classes/NgcLocationOptions.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/model/palette",{"_index":801,"title":{},"body":{"classes/NgcPaletteOptions.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/ngx",{"_index":627,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cookieconsent/src/lib/service/cookieconsent",{"_index":323,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts",{"_index":110,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:102",{"_index":693,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:106",{"_index":691,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:110",{"_index":661,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:137",{"_index":662,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:147",{"_index":673,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:19",{"_index":119,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:192",{"_index":668,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:199",{"_index":669,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:20",{"_index":130,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:206",{"_index":670,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:213",{"_index":663,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:218",{"_index":675,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:223",{"_index":664,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:228",{"_index":665,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:233",{"_index":666,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:238",{"_index":667,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:243",{"_index":674,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:248",{"_index":676,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:253",{"_index":671,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:258",{"_index":672,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:28",{"_index":656,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:29",{"_index":651,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:30",{"_index":645,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:31",{"_index":655,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:32",{"_index":646,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:33",{"_index":648,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:34",{"_index":649,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:35",{"_index":650,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:36",{"_index":654,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:37",{"_index":657,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:38",{"_index":652,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:39",{"_index":653,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:59",{"_index":678,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:62",{"_index":688,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:65",{"_index":695,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:67",{"_index":677,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:70",{"_index":690,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:71",{"_index":687,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:72",{"_index":684,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:73",{"_index":682,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:74",{"_index":680,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:75",{"_index":694,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:76",{"_index":692,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:77",{"_index":685,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:82",{"_index":689,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:86",{"_index":686,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:90",{"_index":683,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:94",{"_index":681,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/cookieconsent.service.ts:98",{"_index":679,"title":{},"body":{"injectables/NgcCookieConsentService.html":{}}}],["cookieconsent/src/lib/service/window.service.ts",{"_index":807,"title":{},"body":{"injectables/WindowService.html":{},"coverage.html":{}}}],["cookieconsent/src/lib/service/window.service.ts:12",{"_index":816,"title":{},"body":{"injectables/WindowService.html":{}}}],["cookieconsent/src/lib/service/window.service.ts:8",{"_index":813,"title":{},"body":{"injectables/WindowService.html":{}}}],["cookieconsent_status",{"_index":706,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["cookieconsentnow",{"_index":1039,"title":{},"body":{"index.html":{}}}],["cookiepolicyhref",{"_index":1237,"title":{},"body":{"index.html":{}}}],["cookiepolicylink",{"_index":1231,"title":{},"body":{"index.html":{}}}],["cookies",{"_index":86,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"index.html":{}}}],["coookie",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["copies",{"_index":1295,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1280,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1266,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":872,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["correct",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["correspond",{"_index":411,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["countries",{"_index":561,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["country",{"_index":282,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["countrycode",{"_index":281,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["coverage",{"_index":935,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":357,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["credits",{"_index":1263,"title":{},"body":{"index.html":{}}}],["css",{"_index":20,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{}}}],["current",{"_index":186,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["currently",{"_index":551,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["custom",{"_index":527,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["customisation",{"_index":516,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["customize",{"_index":1155,"title":{},"body":{"index.html":{}}}],["customizing",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["customlayout",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["d3a7b3d",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["d674b93",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1319,"title":{},"body":{"license.html":{}}}],["data['cookie.allow",{"_index":1204,"title":{},"body":{"index.html":{}}}],["data['cookie.deny",{"_index":1206,"title":{},"body":{"index.html":{}}}],["data['cookie.dismiss",{"_index":1202,"title":{},"body":{"index.html":{}}}],["data['cookie.header",{"_index":1198,"title":{},"body":{"index.html":{}}}],["data['cookie.link",{"_index":1208,"title":{},"body":{"index.html":{}}}],["data['cookie.message",{"_index":1200,"title":{},"body":{"index.html":{}}}],["data['cookie.policy",{"_index":1210,"title":{},"body":{"index.html":{}}}],["date",{"_index":718,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["days",{"_index":720,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["deal",{"_index":1283,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1325,"title":{},"body":{"license.html":{}}}],["decide",{"_index":373,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["declarations",{"_index":1069,"title":{},"body":{"index.html":{},"overview.html":{}}}],["decline",{"_index":90,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["default",{"_index":84,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["defaults",{"_index":360,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["define",{"_index":393,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["defined",{"_index":27,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{}}}],["defines",{"_index":404,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["demo",{"_index":899,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deny",{"_index":62,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["dependencies",{"_index":966,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1034,"title":{},"body":{"index.html":{}}}],["depending",{"_index":786,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["deployed",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{}}}],["destroy",{"_index":161,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["detects",{"_index":567,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["development",{"_index":1334,"title":{},"body":{"properties.html":{}}}],["devices",{"_index":477,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["directly",{"_index":435,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["disable",{"_index":574,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["disabled",{"_index":571,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["disabling",{"_index":1088,"title":{},"body":{"index.html":{}}}],["dismiss",{"_index":63,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{}}}],["dismissonscroll",{"_index":330,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["dismissontimeout",{"_index":331,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["dismissonwindowclick",{"_index":332,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["displayed",{"_index":602,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["distribute",{"_index":1291,"title":{},"body":{"license.html":{}}}],["doc",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":812,"title":{},"body":{"injectables/WindowService.html":{}}}],["document.body",{"_index":401,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["document.body.appendchild(instance.element",{"_index":370,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["documentation",{"_index":936,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["domain",{"_index":697,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["domains",{"_index":716,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["don't",{"_index":794,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["done",{"_index":1082,"title":{},"body":{"index.html":{}}}],["due",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["during",{"_index":609,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcInitializationErrorEvent.html":{}}}],["dynamic",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":1172,"title":{},"body":{"index.html":{}}}],["e1bf9bf",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":11,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["easily",{"_index":1159,"title":{},"body":{"index.html":{}}}],["edgeless",{"_index":592,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["edit",{"_index":595,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["efficient",{"_index":535,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["eg",{"_index":1132,"title":{},"body":{"index.html":{}}}],["element",{"_index":53,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["elements",{"_index":73,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"index.html":{}}}],["elements.ts",{"_index":728,"title":{},"body":{"classes/NgcHTMLElements.html":{},"coverage.html":{}}}],["elements.ts:11",{"_index":737,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:13",{"_index":732,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:15",{"_index":729,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:17",{"_index":731,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:19",{"_index":735,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:21",{"_index":730,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:7",{"_index":734,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["elements.ts:9",{"_index":736,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["en",{"_index":1185,"title":{},"body":{"index.html":{}}}],["en.json",{"_index":1173,"title":{},"body":{"index.html":{}}}],["enable",{"_index":417,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["enabled",{"_index":333,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["encouraged",{"_index":755,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["ensure",{"_index":101,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["equivalent",{"_index":432,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"injectables/WindowService.html":{}}}],["error",{"_index":128,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"changelog.html":{}}}],["error(`cookie",{"_index":251,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["error,popup",{"_index":129,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["error.event.ts",{"_index":739,"title":{},"body":{"interfaces/NgcInitializationErrorEvent.html":{},"coverage.html":{}}}],["errorcallback",{"_index":127,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["errors",{"_index":790,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["error});//notify",{"_index":291,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["etc",{"_index":391,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["event",{"_index":153,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcStatusChangeEvent.html":{},"index.html":{},"license.html":{}}}],["event/initializing.event",{"_index":151,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["event/no",{"_index":148,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["event/status",{"_index":145,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["events",{"_index":1086,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":386,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["example",{"_index":1035,"title":{},"body":{"index.html":{}}}],["exceptions",{"_index":461,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["excluding",{"_index":425,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["execution",{"_index":623,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["existing",{"_index":522,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["exists",{"_index":542,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["expecting",{"_index":399,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["experience",{"_index":103,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["expire",{"_index":717,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["expiry",{"_index":722,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["expirydays",{"_index":700,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["explicitly",{"_index":1080,"title":{},"body":{"index.html":{}}}],["export",{"_index":29,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":1330,"title":{},"body":{"overview.html":{}}}],["express",{"_index":1307,"title":{},"body":{"license.html":{}}}],["extends",{"_index":541,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["extra",{"_index":495,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["f1d600",{"_index":1060,"title":{},"body":{"index.html":{}}}],["f8e71c",{"_index":539,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{}}}],["fadein",{"_index":162,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["fadeout",{"_index":163,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["fail",{"_index":781,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["failed",{"_index":207,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["fails",{"_index":777,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["false",{"_index":364,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{}}}],["fashion",{"_index":770,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["features",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["fedcbd9",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["few",{"_index":1222,"title":{},"body":{"index.html":{}}}],["fff",{"_index":537,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"coverage.html":{}}}],["files",{"_index":1170,"title":{},"body":{"index.html":{},"license.html":{}}}],["find",{"_index":443,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["fired",{"_index":740,"title":{},"body":{"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["first",{"_index":444,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["fitness",{"_index":1312,"title":{},"body":{"license.html":{}}}],["fix",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":579,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["fixes",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":723,"title":{},"body":{"classes/NgcCookieOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["floating",{"_index":474,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["focus",{"_index":445,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["folder",{"_index":524,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["following",{"_index":1164,"title":{},"body":{"index.html":{},"license.html":{}}}],["fontawesome",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["forced",{"_index":475,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["forroot",{"_index":629,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["forroot(config",{"_index":630,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["fortawesome/angular",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["fortawesome/fontawesome",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["fortawesome/free",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["fr",{"_index":1180,"title":{},"body":{"index.html":{}}}],["fr.json",{"_index":1174,"title":{},"body":{"index.html":{}}}],["free",{"_index":758,"title":{},"body":{"classes/NgcLocationOptions.html":{},"license.html":{}}}],["freegeoip",{"_index":772,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["full",{"_index":585,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["fully",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":134,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"coverage.html":{}}}],["functions",{"_index":507,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":1298,"title":{},"body":{"license.html":{}}}],["get(['cookie.header",{"_index":1187,"title":{},"body":{"index.html":{}}}],["getconfig",{"_index":293,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["getnativewindow",{"_index":815,"title":{},"body":{"injectables/WindowService.html":{}}}],["gets",{"_index":292,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["getstatus",{"_index":117,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["getting",{"_index":747,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/NgcLawOptions.html":{}}}],["gettransition",{"_index":299,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["github",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["given",{"_index":800,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{}}}],["giving",{"_index":452,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["global",{"_index":1044,"title":{},"body":{"index.html":{}}}],["go",{"_index":766,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["granted",{"_index":1276,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1326,"title":{},"body":{"modules.html":{}}}],["group",{"_index":22,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["guide",{"_index":715,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["handler",{"_index":757,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["handlers",{"_index":496,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["happening",{"_index":375,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["happy",{"_index":1215,"title":{},"body":{"index.html":{}}}],["hard",{"_index":749,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["hasanswered",{"_index":166,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["hasconsented",{"_index":167,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["hastransition",{"_index":115,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["header",{"_index":78,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["header}}&nbsp",{"_index":733,"title":{},"body":{"classes/NgcHTMLElements.html":{}}}],["height",{"_index":583,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["helper",{"_index":1063,"title":{},"body":{"index.html":{}}}],["helps",{"_index":558,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["here",{"_index":395,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["hereby",{"_index":1275,"title":{},"body":{"license.html":{}}}],["higher",{"_index":1029,"title":{},"body":{"index.html":{}}}],["highlight",{"_index":540,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{}}}],["hoc",{"_index":769,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["holders",{"_index":1316,"title":{},"body":{"license.html":{}}}],["hooks",{"_index":268,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["href",{"_index":79,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["html",{"_index":14,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"index.html":{}}}],["htmlelement",{"_index":397,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["http://w3c.github.io/aria",{"_index":447,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["https",{"_index":726,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["https://cookie.com",{"_index":1238,"title":{},"body":{"index.html":{}}}],["https://cookiesandyou.com",{"_index":95,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["https://goo.gl/s2hy2a",{"_index":1058,"title":{},"body":{"index.html":{}}}],["https://privacy.com",{"_index":1241,"title":{},"body":{"index.html":{}}}],["https://tinesoft.github.io/ngx",{"_index":1024,"title":{},"body":{"index.html":{}}}],["https://tos.com",{"_index":1244,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":509,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["i18n",{"_index":1158,"title":{},"body":{"index.html":{}}}],["icons",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["ideally",{"_index":530,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["identifier",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":751,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["ignoreclicksfrom",{"_index":334,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["implement",{"_index":756,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["implements",{"_index":1099,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1308,"title":{},"body":{"license.html":{}}}],["import",{"_index":137,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["imports",{"_index":640,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{}}}],["improve",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1302,"title":{},"body":{"license.html":{}}}],["including",{"_index":1285,"title":{},"body":{"license.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["index.html",{"_index":384,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["indexable",{"_index":24,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{}}}],["indicate",{"_index":169,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["indicating",{"_index":805,"title":{},"body":{"interfaces/NgcStatusChangeEvent.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"miscellaneous/typealiases.html":{}}}],["init",{"_index":284,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["init(config",{"_index":259,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initial",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["initialisation",{"_index":610,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["initialise",{"_index":118,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{}}}],["initialise(config",{"_index":121,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initialization",{"_index":289,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{}}}],["initializationerror",{"_index":209,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializationerrorsource",{"_index":194,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializationerrorsubscription",{"_index":1109,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":208,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":206,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["initializedsource",{"_index":193,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializedsubscription",{"_index":1108,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":255,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{}}}],["initializing",{"_index":204,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializingsource",{"_index":192,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["initializingsubscription",{"_index":1107,"title":{},"body":{"index.html":{}}}],["initilializing",{"_index":1124,"title":{},"body":{"index.html":{}}}],["inject",{"_index":817,"title":{},"body":{"injectables/WindowService.html":{},"index.html":{}}}],["injectable",{"_index":138,"title":{"injectables/NgcCookieConsentConfig.html":{},"injectables/NgcCookieConsentService.html":{},"injectables/WindowService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"coverage.html":{}}}],["injectables",{"_index":322,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"injectables/NgcCookieConsentService.html":{},"injectables/WindowService.html":{},"overview.html":{}}}],["injected",{"_index":285,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["inline",{"_index":580,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["inner",{"_index":405,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["inside",{"_index":436,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["inspired",{"_index":1228,"title":{},"body":{"index.html":{}}}],["install",{"_index":1033,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1032,"title":{},"body":{"index.html":{}}}],["instance",{"_index":187,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["instantiated",{"_index":252,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["instantiation",{"_index":1085,"title":{},"body":{"index.html":{}}}],["instead",{"_index":513,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["interact",{"_index":174,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["interactions",{"_index":1157,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":446,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["interface",{"_index":0,"title":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"overview.html":{}}}],["interfaces.ts",{"_index":8,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"coverage.html":{}}}],["interfaces.ts:30",{"_index":753,"title":{},"body":{"interfaces/NgcLayouts.html":{}}}],["interfaces.ts:7",{"_index":28,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["invalidated",{"_index":501,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["invoke",{"_index":253,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["involved",{"_index":1163,"title":{},"body":{"index.html":{}}}],["involves",{"_index":1220,"title":{},"body":{"index.html":{}}}],["ipinfo",{"_index":773,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["isopen",{"_index":164,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["isssue",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["it's",{"_index":1131,"title":{},"body":{"index.html":{}}}],["item",{"_index":403,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["json",{"_index":1169,"title":{},"body":{"index.html":{}}}],["json.stringify(event",{"_index":1128,"title":{},"body":{"index.html":{}}}],["json.stringify(event.error?.message",{"_index":1137,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1100,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":709,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["key",{"_index":25,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{}}}],["kind",{"_index":1306,"title":{},"body":{"license.html":{}}}],["kondo",{"_index":1270,"title":{},"body":{"index.html":{},"license.html":{}}}],["later",{"_index":1104,"title":{},"body":{"index.html":{}}}],["law",{"_index":214,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{}}}],["law.event",{"_index":149,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["law.event.ts",{"_index":799,"title":{},"body":{"interfaces/NgcNoCookieLawEvent.html":{},"coverage.html":{}}}],["laws",{"_index":787,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["layout",{"_index":47,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"changelog.html":{},"index.html":{}}}],["layouts",{"_index":43,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["leaks",{"_index":1146,"title":{},"body":{"index.html":{}}}],["learn",{"_index":97,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["left",{"_index":555,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["legend",{"_index":1329,"title":{},"body":{"overview.html":{}}}],["letter",{"_index":785,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["level",{"_index":12,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{}}}],["leveraging",{"_index":1062,"title":{},"body":{"index.html":{}}}],["liability",{"_index":1320,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1317,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1160,"title":{},"body":{"index.html":{}}}],["library",{"_index":184,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["libs/.../common",{"_index":1338,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../ngx",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/ngx",{"_index":6,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["license",{"_index":1265,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1271,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1286,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1309,"title":{},"body":{"license.html":{}}}],["link",{"_index":41,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["linked",{"_index":396,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["linking",{"_index":182,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["links",{"_index":1229,"title":{},"body":{"index.html":{}}}],["lint",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1176,"title":{},"body":{"index.html":{}}}],["listed",{"_index":1043,"title":{},"body":{"index.html":{}}}],["literal",{"_index":764,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["loaded",{"_index":1079,"title":{},"body":{"index.html":{}}}],["loader",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":1056,"title":{},"body":{"index.html":{}}}],["location",{"_index":335,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"changelog.html":{}}}],["look",{"_index":529,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["made",{"_index":505,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["magic",{"_index":177,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["main",{"_index":46,"title":{},"body":{"interfaces/NgcCompliance.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"index.html":{}}}],["major",{"_index":1250,"title":{},"body":{"index.html":{}}}],["make",{"_index":916,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maker",{"_index":178,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["mandatory",{"_index":918,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["markdown",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["marker",{"_index":168,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["markers",{"_index":45,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["matched",{"_index":388,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["matches",{"_index":385,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["matching",{"_index":65,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["matrix",{"_index":1026,"title":{},"body":{"index.html":{}}}],["maxmind",{"_index":774,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["means",{"_index":499,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["memory",{"_index":1145,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":1311,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1289,"title":{},"body":{"license.html":{}}}],["message",{"_index":80,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"index.html":{}}}],["messagelink",{"_index":576,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"index.html":{}}}],["messagelink}}{{compliance",{"_index":1230,"title":{},"body":{"index.html":{}}}],["messages",{"_index":910,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["method",{"_index":254,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["methods",{"_index":116,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"index.html":{}}}],["milliseconds",{"_index":420,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["mind",{"_index":564,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["minimum",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1016,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":1273,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mobile",{"_index":476,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["mobileforcefloat",{"_index":336,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["mode",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["model/common",{"_index":143,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["model/content",{"_index":615,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["model/cookie",{"_index":616,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["model/html",{"_index":612,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["model/law",{"_index":614,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["model/location",{"_index":613,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["model/palette",{"_index":617,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["modification",{"_index":783,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["modify",{"_index":1288,"title":{},"body":{"license.html":{}}}],["module",{"_index":624,"title":{"modules/NgcCookieConsentModule.html":{}},"body":{"modules/NgcCookieConsentModule.html":{},"classes/NgcLocationOptions.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":626,"title":{"modules.html":{}},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":632,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["more",{"_index":98,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["move",{"_index":778,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["name",{"_index":132,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":463,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["nativewindow",{"_index":810,"title":{},"body":{"injectables/WindowService.html":{}}}],["necessary",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["need",{"_index":460,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["needed",{"_index":15,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["needs",{"_index":544,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["never",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":219,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":780,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["ng",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["ng)module",{"_index":1067,"title":{},"body":{"index.html":{}}}],["ng6",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["ngccompliance",{"_index":1,"title":{"interfaces/NgcCompliance.html":{}},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"coverage.html":{}}}],["ngccontentoptions",{"_index":66,"title":{"classes/NgcContentOptions.html":{}},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{},"coverage.html":{}}}],["ngccookiecompliance",{"_index":1337,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ngccookieconsent",{"_index":109,"title":{"interfaces/NgcCookieConsent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{}}}],["ngccookieconsentconfig",{"_index":122,"title":{"injectables/NgcCookieConsentConfig.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ngccookieconsentconfig.content",{"_index":1225,"title":{},"body":{"index.html":{}}}],["ngccookieconsentconfig.elements",{"_index":1226,"title":{},"body":{"index.html":{}}}],["ngccookieconsentconfig.layout",{"_index":1223,"title":{},"body":{"index.html":{}}}],["ngccookieconsentconfig.layouts",{"_index":1224,"title":{},"body":{"index.html":{}}}],["ngccookieconsentmodule",{"_index":625,"title":{"modules/NgcCookieConsentModule.html":{}},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{},"modules.html":{}}}],["ngccookieconsentmodule.forroot(cookieconfig",{"_index":1071,"title":{},"body":{"index.html":{}}}],["ngccookieconsentpopup",{"_index":125,"title":{"interfaces/NgcCookieConsentPopup.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{}}}],["ngccookieconsentservice",{"_index":176,"title":{"injectables/NgcCookieConsentService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{},"index.html":{}}}],["ngccookieconsentservice.hasanswered",{"_index":1126,"title":{},"body":{"index.html":{}}}],["ngccookieconsentstatus",{"_index":60,"title":{"interfaces/NgcCookieConsentStatus.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"changelog.html":{},"coverage.html":{}}}],["ngccookiecontentservice",{"_index":1077,"title":{},"body":{"index.html":{}}}],["ngccookielayout",{"_index":467,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["ngccookieoptions",{"_index":407,"title":{"classes/NgcCookieOptions.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"changelog.html":{},"coverage.html":{}}}],["ngccookieposition",{"_index":547,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["ngccookietheme",{"_index":587,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["ngccookietype",{"_index":598,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["ngchascookieconsent",{"_index":172,"title":{"interfaces/NgcHasCookieConsent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"coverage.html":{}}}],["ngchtmlelements",{"_index":428,"title":{"classes/NgcHTMLElements.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcHTMLElements.html":{},"coverage.html":{}}}],["ngcinitializationerrorevent",{"_index":152,"title":{"interfaces/NgcInitializationErrorEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"coverage.html":{},"index.html":{}}}],["ngcinitializingevent",{"_index":150,"title":{"interfaces/NgcInitializingEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{},"coverage.html":{},"index.html":{}}}],["ngclawoptions",{"_index":465,"title":{"classes/NgcLawOptions.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLawOptions.html":{},"changelog.html":{},"coverage.html":{}}}],["ngclayouts",{"_index":55,"title":{"interfaces/NgcLayouts.html":{}},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"coverage.html":{}}}],["ngclocationoptions",{"_index":471,"title":{"classes/NgcLocationOptions.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{},"changelog.html":{},"coverage.html":{}}}],["ngcnocookielawevent",{"_index":147,"title":{"interfaces/NgcNoCookieLawEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"coverage.html":{},"index.html":{}}}],["ngcpalette",{"_index":38,"title":{"interfaces/NgcPalette.html":{}},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"coverage.html":{}}}],["ngcpaletteoptions",{"_index":525,"title":{"classes/NgcPaletteOptions.html":{}},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{},"coverage.html":{}}}],["ngcstatuschangeevent",{"_index":144,"title":{"interfaces/NgcStatusChangeEvent.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcStatusChangeEvent.html":{},"coverage.html":{},"index.html":{}}}],["ngmodule",{"_index":633,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":1144,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":1115,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":638,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"dependencies.html":{},"index.html":{}}}],["nocookielaw",{"_index":216,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["nocookielawsource",{"_index":197,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["nocookielawsubscription",{"_index":1112,"title":{},"body":{"index.html":{}}}],["node",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["node_modules/cookieconsent/build/cookieconsent.min.css",{"_index":1052,"title":{},"body":{"index.html":{}}}],["node_modules/cookieconsent/build/cookieconsent.min.js",{"_index":1051,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1314,"title":{},"body":{"license.html":{}}}],["note",{"_index":581,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["notice",{"_index":1300,"title":{},"body":{"license.html":{}}}],["notified",{"_index":199,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["now",{"_index":890,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":1036,"title":{},"body":{"index.html":{}}}],["null",{"_index":249,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["number",{"_index":413,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["nx",{"_index":1040,"title":{},"body":{"index.html":{}}}],["nx/angular",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":114,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"injectables/WindowService.html":{}}}],["objet",{"_index":179,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["observable",{"_index":141,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["observables",{"_index":1116,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":1279,"title":{},"body":{"license.html":{}}}],["occured",{"_index":741,"title":{},"body":{"interfaces/NgcInitializationErrorEvent.html":{}}}],["ondestroy",{"_index":1091,"title":{},"body":{"index.html":{}}}],["ones",{"_index":759,"title":{},"body":{"classes/NgcLocationOptions.html":{},"index.html":{}}}],["oninit",{"_index":1090,"title":{},"body":{"index.html":{}}}],["oninitialise",{"_index":337,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{}}}],["onnocookielaw",{"_index":338,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"changelog.html":{}}}],["onpopupclose",{"_index":339,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["onpopupopen",{"_index":340,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["onrevokechoice",{"_index":341,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["onstatuschange",{"_index":342,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["onto",{"_index":779,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["open",{"_index":159,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["opened",{"_index":492,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["opens",{"_index":200,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["opt",{"_index":1061,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["option",{"_index":572,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["optional",{"_index":76,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":32,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"changelog.html":{},"index.html":{}}}],["options.ts",{"_index":69,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"coverage.html":{},"index.html":{}}}],["options.ts:10",{"_index":104,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["options.ts:11",{"_index":707,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:12",{"_index":92,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["options.ts:14",{"_index":87,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["options.ts:15",{"_index":708,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:16",{"_index":91,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:18",{"_index":99,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:19",{"_index":703,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:20",{"_index":96,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:21",{"_index":775,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["options.ts:22",{"_index":89,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:23",{"_index":705,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["options.ts:24",{"_index":105,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["options.ts:26",{"_index":107,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcCookieOptions.html":{}}}],["options.ts:27",{"_index":765,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["options.ts:6",{"_index":746,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["options.ts:8",{"_index":94,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["optons",{"_index":744,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["order",{"_index":761,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["osano",{"_index":1264,"title":{},"body":{"index.html":{}}}],["othercomponent",{"_index":1074,"title":{},"body":{"index.html":{}}}],["othermodule",{"_index":1075,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":698,"title":{},"body":{"classes/NgcCookieOptions.html":{},"license.html":{}}}],["out",{"_index":355,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{},"license.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["override",{"_index":1196,"title":{},"body":{"index.html":{}}}],["overridehtml",{"_index":343,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["overriding",{"_index":1221,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1328,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":965,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaging",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":383,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["page_1.html",{"_index":389,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["page_2.html",{"_index":390,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["page_[\\d]+.html",{"_index":387,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["page_[\\d]+\\.html",{"_index":618,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["pages",{"_index":381,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["palette",{"_index":31,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["param",{"_index":258,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["parameters",{"_index":131,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"injectables/WindowService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":750,"title":{},"body":{"classes/NgcLawOptions.html":{},"license.html":{}}}],["pass",{"_index":528,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["passed",{"_index":400,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["path",{"_index":701,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["peerdependencies",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1274,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1296,"title":{},"body":{"license.html":{}}}],["person",{"_index":1278,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1297,"title":{},"body":{"license.html":{}}}],["picker",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["piece",{"_index":454,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["placed",{"_index":611,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["placeholders",{"_index":606,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["platform",{"_index":808,"title":{},"body":{"injectables/WindowService.html":{}}}],["plugin",{"_index":1245,"title":{},"body":{"index.html":{}}}],["points",{"_index":621,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["policy",{"_index":81,"title":{},"body":{"classes/NgcContentOptions.html":{},"changelog.html":{},"index.html":{}}}],["popperjs/core",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["popup",{"_index":124,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["popupclose",{"_index":203,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupclosesource",{"_index":191,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupclosesubscription",{"_index":1106,"title":{},"body":{"index.html":{}}}],["popupinstance",{"_index":188,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopen",{"_index":201,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopensource",{"_index":190,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["popupopensubscription",{"_index":1105,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1304,"title":{},"body":{"license.html":{}}}],["position",{"_index":344,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["positions",{"_index":552,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["possible",{"_index":1340,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["pre",{"_index":521,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["prepare",{"_index":1053,"title":{},"body":{"index.html":{}}}],["present",{"_index":1268,"title":{},"body":{"index.html":{},"license.html":{}}}],["prevent",{"_index":361,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["prevents",{"_index":449,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["previous",{"_index":1212,"title":{},"body":{"index.html":{}}}],["priority",{"_index":771,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["prismjs",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["privacy",{"_index":1239,"title":{},"body":{"index.html":{}}}],["privacypolicyhref",{"_index":1240,"title":{},"body":{"index.html":{}}}],["privacypolicylink",{"_index":1232,"title":{},"body":{"index.html":{}}}],["private",{"_index":185,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"index.html":{}}}],["program",{"_index":622,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["project.json",{"_index":1046,"title":{},"body":{"index.html":{}}}],["properly",{"_index":1042,"title":{},"body":{"index.html":{}}}],["properties",{"_index":75,"title":{"properties.html":{}},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"properties.html":{}}}],["property",{"_index":171,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["provide",{"_index":1167,"title":{},"body":{"index.html":{}}}],["provided",{"_index":256,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"license.html":{}}}],["providengccookieconsent",{"_index":637,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["providengccookieconsent(config",{"_index":642,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["providengccookieconsent(cookieconfig",{"_index":1066,"title":{},"body":{"index.html":{}}}],["provider",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":641,"title":{},"body":{"modules/NgcCookieConsentModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["public",{"_index":367,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["publish",{"_index":1290,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1313,"title":{},"body":{"license.html":{}}}],["range",{"_index":416,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["react",{"_index":504,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["read",{"_index":714,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["recommended",{"_index":409,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["reference",{"_index":21,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["referenced",{"_index":1227,"title":{},"body":{"index.html":{}}}],["references",{"_index":406,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["refers",{"_index":549,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["refs",{"_index":1101,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":377,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["regionallaw",{"_index":745,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["register",{"_index":520,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["relax",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["relies",{"_index":1246,"title":{},"body":{"index.html":{}}}],["remove",{"_index":433,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["removes",{"_index":577,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["render",{"_index":16,"title":{},"body":{"interfaces/NgcCompliance.html":{}}}],["replaced",{"_index":431,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["replaces",{"_index":575,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["represent",{"_index":112,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["representing",{"_index":56,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["require",{"_index":562,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["requires",{"_index":1027,"title":{},"body":{"index.html":{}}}],["reset",{"_index":1332,"title":{},"body":{"overview.html":{}}}],["resources",{"_index":793,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["restriction",{"_index":1284,"title":{},"body":{"license.html":{}}}],["results",{"_index":64,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":294,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["returns",{"_index":120,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"miscellaneous/functions.html":{}}}],["revokable",{"_index":345,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["revoke",{"_index":427,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["revokebtn",{"_index":346,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["revokechoice",{"_index":213,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["revokechoicesource",{"_index":196,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["revokechoicesubscription",{"_index":1111,"title":{},"body":{"index.html":{}}}],["revoked",{"_index":212,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["right",{"_index":556,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":1287,"title":{},"body":{"license.html":{}}}],["root",{"_index":1094,"title":{},"body":{"index.html":{}}}],["rules",{"_index":439,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLawOptions.html":{}}}],["runs",{"_index":1249,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":142,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"dependencies.html":{},"index.html":{}}}],["safe",{"_index":1125,"title":{},"body":{"index.html":{}}}],["save",{"_index":1037,"title":{},"body":{"index.html":{}}}],["scope",{"_index":181,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["script",{"_index":791,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["scripts",{"_index":1050,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":415,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["secure",{"_index":702,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["see",{"_index":469,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["select",{"_index":600,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["selected",{"_index":570,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["selector",{"_index":1093,"title":{},"body":{"index.html":{}}}],["selectors",{"_index":464,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["sell",{"_index":1294,"title":{},"body":{"license.html":{}}}],["separate",{"_index":532,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["server",{"_index":412,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"injectables/WindowService.html":{}}}],["service",{"_index":173,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"injectables/WindowService.html":{},"changelog.html":{},"index.html":{}}}],["service's",{"_index":1083,"title":{},"body":{"index.html":{}}}],["service/index",{"_index":636,"title":{},"body":{"modules/NgcCookieConsentModule.html":{}}}],["servicedefinitions",{"_index":762,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["services",{"_index":748,"title":{},"body":{"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"changelog.html":{}}}],["set",{"_index":266,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["setstatus",{"_index":643,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{}}}],["setstatus(status",{"_index":157,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["setting",{"_index":363,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["shall",{"_index":1301,"title":{},"body":{"license.html":{}}}],["sheet",{"_index":534,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["show",{"_index":658,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"index.html":{}}}],["showing",{"_index":450,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["showlink",{"_index":347,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["showrevoke",{"_index":647,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["shows",{"_index":569,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["simple",{"_index":379,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["simply",{"_index":1073,"title":{},"body":{"index.html":{}}}],["site",{"_index":1234,"title":{},"body":{"index.html":{}}}],["size",{"_index":586,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["software",{"_index":1281,"title":{},"body":{"license.html":{}}}],["solid",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["soon",{"_index":485,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{}}}],["sources",{"_index":189,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["specific",{"_index":752,"title":{},"body":{"classes/NgcLawOptions.html":{}}}],["specified",{"_index":719,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["specify",{"_index":382,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["sponsorship",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["src/assets",{"_index":1171,"title":{},"body":{"index.html":{}}}],["src/styles",{"_index":523,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["stackblitz/sdk",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["standalone",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["start",{"_index":479,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["started",{"_index":820,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":348,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{}}}],["status",{"_index":59,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializingEvent.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"interfaces/NgcStatusChangeEvent.html":{}}}],["statuschange",{"_index":211,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["statuschangesource",{"_index":195,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["statuschangesubscription",{"_index":1110,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1165,"title":{},"body":{"index.html":{}}}],["still",{"_index":458,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["straight",{"_index":767,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["streams",{"_index":227,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["strict",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":26,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":71,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{}}}],["stuff",{"_index":1087,"title":{},"body":{"index.html":{}}}],["style",{"_index":533,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["stylename",{"_index":594,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["styles",{"_index":590,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["stylesheets",{"_index":35,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["styleurls",{"_index":1097,"title":{},"body":{"index.html":{}}}],["styling",{"_index":559,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["subject",{"_index":140,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"license.html":{}}}],["sublicense",{"_index":1292,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":198,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["subscribe(data",{"_index":1194,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":1092,"title":{},"body":{"index.html":{}}}],["subscriptions",{"_index":1102,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":1303,"title":{},"body":{"license.html":{}}}],["succeeds",{"_index":784,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["successcallback",{"_index":123,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["successful",{"_index":288,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["successfully",{"_index":205,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"index.html":{}}}],["such",{"_index":1049,"title":{},"body":{"index.html":{}}}],["suggest",{"_index":440,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["suit",{"_index":1219,"title":{},"body":{"index.html":{}}}],["suport",{"_index":263,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["support",{"_index":297,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"changelog.html":{},"index.html":{}}}],["supports",{"_index":1214,"title":{},"body":{"index.html":{}}}],["sure",{"_index":517,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["svg",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["tabbable",{"_index":442,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["table",{"_index":964,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":792,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["target",{"_index":82,"title":{},"body":{"classes/NgcContentOptions.html":{},"changelog.html":{}}}],["tell",{"_index":51,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["templateurl",{"_index":1095,"title":{},"body":{"index.html":{}}}],["terms",{"_index":1242,"title":{},"body":{"index.html":{}}}],["tested",{"_index":1030,"title":{},"body":{"index.html":{}}}],["text",{"_index":42,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{}}}],["theme",{"_index":349,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["themes",{"_index":1342,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["this._doc?.defaultview",{"_index":819,"title":{},"body":{"injectables/WindowService.html":{}}}],["this.ccservice.destroy",{"_index":1211,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig",{"_index":1119,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content",{"_index":1195,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.allow",{"_index":1203,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.deny",{"_index":1205,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.dismiss",{"_index":1201,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.header",{"_index":1197,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.link",{"_index":1207,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.message",{"_index":1199,"title":{},"body":{"index.html":{}}}],["this.ccservice.getconfig().content.policy",{"_index":1209,"title":{},"body":{"index.html":{}}}],["this.ccservice.init(this.ccservice.getconfig",{"_index":1213,"title":{},"body":{"index.html":{}}}],["this.ccservice.initializationerror$.subscribe",{"_index":1135,"title":{},"body":{"index.html":{}}}],["this.ccservice.initialized$.subscribe",{"_index":1130,"title":{},"body":{"index.html":{}}}],["this.ccservice.initializing$.subscribe",{"_index":1123,"title":{},"body":{"index.html":{}}}],["this.ccservice.nocookielaw$.subscribe",{"_index":1143,"title":{},"body":{"index.html":{}}}],["this.ccservice.popupclose$.subscribe",{"_index":1121,"title":{},"body":{"index.html":{}}}],["this.ccservice.popupopen$.subscribe",{"_index":1118,"title":{},"body":{"index.html":{}}}],["this.ccservice.revokechoice$.subscribe",{"_index":1141,"title":{},"body":{"index.html":{}}}],["this.ccservice.statuschange$.subscribe",{"_index":1139,"title":{},"body":{"index.html":{}}}],["this.checkpopupinstantiated('clearstatus",{"_index":302,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('close",{"_index":306,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('destroy",{"_index":308,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('fadein",{"_index":310,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('fadeout",{"_index":312,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('hasanswered",{"_index":318,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('hasconsented",{"_index":320,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('isopen",{"_index":314,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('open",{"_index":304,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.checkpopupinstantiated('togglerevokebutton",{"_index":316,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config",{"_index":265,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.oninitialise",{"_index":273,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onnocookielaw",{"_index":280,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onpopupclose",{"_index":271,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onpopupopen",{"_index":269,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onrevokechoice",{"_index":278,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.config.onstatuschange",{"_index":275,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent",{"_index":264,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.hastransition",{"_index":300,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.initialise(this.config",{"_index":286,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.cookieconsent.status",{"_index":295,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.hasanswered",{"_index":510,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["this.hasconsented",{"_index":511,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["this.init(config",{"_index":246,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializationerror",{"_index":236,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializationerrorsource",{"_index":223,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializationerrorsource.asobservable",{"_index":237,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializationerrorsource.next({error",{"_index":290,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializationerrorsubscription",{"_index":1134,"title":{},"body":{"index.html":{}}}],["this.initializationerrorsubscription.unsubscribe",{"_index":1151,"title":{},"body":{"index.html":{}}}],["this.initialized",{"_index":234,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializedsource",{"_index":222,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializedsource.asobservable",{"_index":235,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializedsource.next();//notify",{"_index":287,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializedsubscription",{"_index":1129,"title":{},"body":{"index.html":{}}}],["this.initializedsubscription.unsubscribe",{"_index":1150,"title":{},"body":{"index.html":{}}}],["this.initializing",{"_index":232,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializingsource",{"_index":221,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializingsource.asobservable",{"_index":233,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializingsource.next",{"_index":274,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.initializingsubscription",{"_index":1122,"title":{},"body":{"index.html":{}}}],["this.initializingsubscription.unsubscribe",{"_index":1149,"title":{},"body":{"index.html":{}}}],["this.nocookielaw",{"_index":242,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsource",{"_index":226,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsource.asobservable",{"_index":243,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsource.next",{"_index":283,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.nocookielawsubscription",{"_index":1142,"title":{},"body":{"index.html":{}}}],["this.nocookielawsubscription.unsubscribe",{"_index":1154,"title":{},"body":{"index.html":{}}}],["this.popupclose",{"_index":230,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesource",{"_index":220,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesource.asobservable",{"_index":231,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesource.next",{"_index":272,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupclosesubscription",{"_index":1120,"title":{},"body":{"index.html":{}}}],["this.popupclosesubscription.unsubscribe",{"_index":1148,"title":{},"body":{"index.html":{}}}],["this.popupinstance",{"_index":248,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.clearstatus",{"_index":303,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.close(showrevoke",{"_index":307,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.destroy",{"_index":309,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.fadein",{"_index":311,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.fadeout",{"_index":313,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.hasanswered",{"_index":319,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.hasconsented",{"_index":321,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.isopen",{"_index":315,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.open",{"_index":305,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupinstance.togglerevokebutton(show",{"_index":317,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopen",{"_index":228,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensource",{"_index":218,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensource.asobservable",{"_index":229,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensource.next",{"_index":270,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.popupopensubscription",{"_index":1117,"title":{},"body":{"index.html":{}}}],["this.popupopensubscription.unsubscribe",{"_index":1147,"title":{},"body":{"index.html":{}}}],["this.revokechoice",{"_index":240,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesource",{"_index":225,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesource.asobservable",{"_index":241,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesource.next",{"_index":279,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.revokechoicesubscription",{"_index":1140,"title":{},"body":{"index.html":{}}}],["this.revokechoicesubscription.unsubscribe",{"_index":1153,"title":{},"body":{"index.html":{}}}],["this.statuschange",{"_index":238,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesource",{"_index":224,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesource.asobservable",{"_index":239,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesource.next",{"_index":277,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.statuschangesubscription",{"_index":1138,"title":{},"body":{"index.html":{}}}],["this.statuschangesubscription.unsubscribe",{"_index":1152,"title":{},"body":{"index.html":{}}}],["this.translateservice",{"_index":1186,"title":{},"body":{"index.html":{}}}],["this.translateservice.addlangs(['en",{"_index":1179,"title":{},"body":{"index.html":{}}}],["this.translateservice.getbrowserlang",{"_index":1183,"title":{},"body":{"index.html":{}}}],["this.translateservice.setdefaultlang('en",{"_index":1181,"title":{},"body":{"index.html":{}}}],["this.translateservice.use(browserlang.match(/en|fr",{"_index":1184,"title":{},"body":{"index.html":{}}}],["this.window",{"_index":244,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["this.window.cookieconsent",{"_index":260,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["throw",{"_index":250,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["time",{"_index":419,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["timeout",{"_index":763,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["tine",{"_index":1269,"title":{},"body":{"index.html":{},"license.html":{}}}],["togglerevokebutton",{"_index":644,"title":{},"body":{"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{}}}],["togglerevokebutton(show",{"_index":165,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["tool",{"_index":52,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"classes/NgcLawOptions.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["top",{"_index":553,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["tort",{"_index":1322,"title":{},"body":{"license.html":{}}}],["toshref",{"_index":1243,"title":{},"body":{"index.html":{}}}],["toslink",{"_index":1233,"title":{},"body":{"index.html":{}}}],["totally",{"_index":1217,"title":{},"body":{"index.html":{}}}],["track",{"_index":710,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["traditional",{"_index":1068,"title":{},"body":{"index.html":{}}}],["tranlate",{"_index":354,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["translate",{"_index":1161,"title":{},"body":{"index.html":{}}}],["translate/core",{"_index":989,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["translate/http",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["translated",{"_index":909,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["translateservice",{"_index":1177,"title":{},"body":{"index.html":{}}}],["translateservice:translateservice",{"_index":1178,"title":{},"body":{"index.html":{}}}],["translation",{"_index":1168,"title":{},"body":{"index.html":{}}}],["translations",{"_index":298,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["transmitted",{"_index":724,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["transparent",{"_index":538,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcPaletteOptions.html":{}}}],["trigger",{"_index":493,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["true",{"_index":352,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{}}}],["truly",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["try",{"_index":797,"title":{},"body":{"classes/NgcLocationOptions.html":{}}}],["ts2411",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["tslib",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":50,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{}}}],["type",{"_index":83,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"interfaces/NgcHasCookieConsent.html":{},"interfaces/NgcInitializationErrorEvent.html":{},"interfaces/NgcInitializingEvent.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcNoCookieLawEvent.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"interfaces/NgcStatusChangeEvent.html":{},"injectables/WindowService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1335,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":394,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"miscellaneous/typealiases.html":{}}}],["types.ts",{"_index":1339,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typically",{"_index":170,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["typings",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["typo",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1156,"title":{},"body":{"index.html":{}}}],["ultimate",{"_index":515,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["undefined",{"_index":108,"title":{},"body":{"classes/NgcContentOptions.html":{},"classes/NgcHTMLElements.html":{}}}],["under",{"_index":1272,"title":{},"body":{"index.html":{}}}],["underlying",{"_index":1247,"title":{},"body":{"index.html":{}}}],["understand",{"_index":1236,"title":{},"body":{"index.html":{}}}],["universal",{"_index":262,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["unsubscribe",{"_index":1103,"title":{},"body":{"index.html":{}}}],["up",{"_index":480,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["update",{"_index":873,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["upon",{"_index":1084,"title":{},"body":{"index.html":{}}}],["url",{"_index":712,"title":{},"body":{"classes/NgcCookieOptions.html":{},"changelog.html":{}}}],["usage",{"_index":1076,"title":{},"body":{"index.html":{}}}],["use",{"_index":506,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":19,"title":{},"body":{"interfaces/NgcCompliance.html":{},"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["useful",{"_index":451,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["user",{"_index":482,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"index.html":{}}}],["users",{"_index":711,"title":{},"body":{"classes/NgcCookieOptions.html":{}}}],["uses",{"_index":100,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["using",{"_index":36,"title":{},"body":{"interfaces/NgcCompliance.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"classes/NgcLocationOptions.html":{},"interfaces/NgcPalette.html":{},"classes/NgcPaletteOptions.html":{},"index.html":{}}}],["v1.1.0",{"_index":1262,"title":{},"body":{"index.html":{}}}],["v12.x.x",{"_index":1259,"title":{},"body":{"index.html":{}}}],["v14.x.x",{"_index":1257,"title":{},"body":{"index.html":{}}}],["v15.x.x",{"_index":1255,"title":{},"body":{"index.html":{}}}],["v16.x.x",{"_index":1253,"title":{},"body":{"index.html":{}}}],["v2.2.3",{"_index":1260,"title":{},"body":{"index.html":{}}}],["v3.0.1",{"_index":1258,"title":{},"body":{"index.html":{}}}],["v3.1.0",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["v4.0.1",{"_index":1256,"title":{},"body":{"index.html":{}}}],["v5.0.0",{"_index":1254,"title":{},"body":{"index.html":{}}}],["v5.x.x",{"_index":1064,"title":{},"body":{"index.html":{}}}],["v6",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["v6.0.0",{"_index":1252,"title":{},"body":{"index.html":{}}}],["v6.x.x",{"_index":1261,"title":{},"body":{"index.html":{}}}],["v8",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["value",{"_index":85,"title":{},"body":{"classes/NgcContentOptions.html":{},"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{},"classes/NgcHTMLElements.html":{},"classes/NgcLawOptions.html":{},"classes/NgcLocationOptions.html":{},"classes/NgcPaletteOptions.html":{}}}],["values",{"_index":410,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcCookieOptions.html":{}}}],["var",{"_index":368,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["version",{"_index":889,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["versions",{"_index":927,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":725,"title":{},"body":{"classes/NgcCookieOptions.html":{},"classes/NgcLocationOptions.html":{},"index.html":{}}}],["view",{"_index":1022,"title":{},"body":{"index.html":{}}}],["void",{"_index":126,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["want",{"_index":437,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"classes/NgcLocationOptions.html":{}}}],["warranties",{"_index":1310,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1305,"title":{},"body":{"license.html":{}}}],["we'll",{"_index":457,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["website",{"_index":93,"title":{},"body":{"classes/NgcContentOptions.html":{},"index.html":{}}}],["whether",{"_index":374,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{},"license.html":{}}}],["whitelist",{"_index":604,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["whitelistpage",{"_index":350,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["window",{"_index":72,"title":{},"body":{"classes/NgcContentOptions.html":{},"interfaces/NgcCookieConsent.html":{},"injectables/NgcCookieConsentConfig.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{}}}],["window.service",{"_index":155,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["windows",{"_index":550,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["windowservice",{"_index":154,"title":{"injectables/WindowService.html":{}},"body":{"interfaces/NgcCookieConsent.html":{},"modules/NgcCookieConsentModule.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{},"injectables/WindowService.html":{},"coverage.html":{}}}],["windowservice.nativewindow",{"_index":245,"title":{},"body":{"interfaces/NgcCookieConsent.html":{},"interfaces/NgcCookieConsentPopup.html":{},"injectables/NgcCookieConsentService.html":{},"interfaces/NgcHasCookieConsent.html":{}}}],["wire",{"_index":596,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["within",{"_index":508,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["without",{"_index":782,"title":{},"body":{"classes/NgcLocationOptions.html":{},"license.html":{}}}],["word",{"_index":48,"title":{},"body":{"interfaces/NgcCompliance.html":{},"interfaces/NgcCookieConsentStatus.html":{},"interfaces/NgcLayouts.html":{},"interfaces/NgcPalette.html":{}}}],["words",{"_index":601,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["work",{"_index":699,"title":{},"body":{"classes/NgcCookieOptions.html":{},"index.html":{}}}],["works",{"_index":1089,"title":{},"body":{"index.html":{}}}],["workspace",{"_index":1251,"title":{},"body":{"index.html":{}}}],["workspace/devkit",{"_index":1248,"title":{},"body":{"index.html":{}}}],["write",{"_index":434,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["wrong",{"_index":900,"title":{},"body":{"changelog.html":{}}}],["x274c",{"_index":88,"title":{},"body":{"classes/NgcContentOptions.html":{}}}],["yarn",{"_index":1038,"title":{},"body":{"index.html":{}}}],["yes",{"_index":135,"title":{},"body":{"interfaces/NgcCookieConsent.html":{}}}],["your.domain.com",{"_index":1057,"title":{},"body":{"index.html":{}}}],["yours",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["yourself",{"_index":366,"title":{},"body":{"injectables/NgcCookieConsentConfig.html":{}}}],["zone.js",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":1331,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/NgcCompliance.html":{"url":"interfaces/NgcCompliance.html","title":"interface - NgcCompliance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcCompliance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Compliance.\nEach compliance level contains the HTML needed to render that level of compliance.\nThe 'cc-compliance' class is used in the CSS to reference the group of buttons.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts:7\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcContentOptions.html":{"url":"classes/NgcContentOptions.html","title":"class - NgcContentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcContentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/content-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Content Options.\nText strings used for cookie consent window elements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allow\n                            \n                            \n                                    Optional\n                                close\n                            \n                            \n                                    Optional\n                                deny\n                            \n                            \n                                    Optional\n                                dismiss\n                            \n                            \n                                    Optional\n                                header\n                            \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                link\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                policy\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        allow\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Allow cookies'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '&#x274c;'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deny\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Decline'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dismiss\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Got it!'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        header\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Cookies used on the website!'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://cookiesandyou.com'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Learn more'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'This website uses cookies to ensure you get the best experience on our website.'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Cookie Policy'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '_blank'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | undefined\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/model/content-options.ts:26\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class NgcContentOptions {\n\n  header ? = 'Cookies used on the website!';\n\n  message ? = 'This website uses cookies to ensure you get the best experience on our website.';\n\n  dismiss ? = 'Got it!';\n\n  allow ? = 'Allow cookies';\n\n  deny ? = 'Decline';\n\n  link ? = 'Learn more';\n\n  href ? = 'https://cookiesandyou.com';\n\n  close ? = '&#x274c;';\n\n  policy ? = 'Cookie Policy';\n\n  target ? = '_blank';\n\n  [key: string]: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsent.html":{"url":"interfaces/NgcCookieConsent.html","title":"interface - NgcCookieConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcCookieConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Basic interface to represent cookieconsent object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hasTransition\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getStatus\n                                    \n                                \n                                \n                                    \n                                        initialise\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         NgcCookieConsentStatus\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialise\n                        \n                    \n                \n            \n            \n                \ninitialise(config: NgcCookieConsentConfig, successCallback?: (popup?: NgcCookieConsentPopup) => void, errorCallback?: (error?: Error,popup?: NgcCookieConsentPopup) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgcCookieConsentConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                successCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                errorCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasTransition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasTransition:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         NgcCookieConsentStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgcCookieConsentStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializingEvent } from '../event/initializing.event';\nimport { NgcInitializationErrorEvent } from '../event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, successCallback?: (popup: NgcCookieConsentPopup) => void, errorCallback?: (error: Error, popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent!: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance!: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config!: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializingSource: Subject;\n  private initializedSource: Subject;\n  private initializationErrorSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent is initializing.\n   */\n  initializing$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.\n   */\n  initialized$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has failed to initialize.\n   */\n  initializationError$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializingSource = new Subject();\n    this.initializedSource = new Subject();\n    this.initializationErrorSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initializing$ = this.initializingSource.asObservable();\n    this.initialized$ = this.initializedSource.asObservable();\n    this.initializationError$ = this.initializationErrorSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window && this.window.cookieconsent) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializingSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config,\n        (popup: NgcCookieConsentPopup) => {\n          this.popupInstance = popup;\n          this.initializedSource.next();//notify of successful initialization\n        },\n        (error: Error, popup: NgcCookieConsentPopup) => {\n          this.initializationErrorSource.next({error: error});//notify of failed initialization\n        }\n      );\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgcCookieConsentConfig.html":{"url":"injectables/NgcCookieConsentConfig.html","title":"injectable - NgcCookieConsentConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgcCookieConsentConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Cookie Consent configuration object.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                animateRevokable\n                            \n                            \n                                    Optional\n                                autoAttach\n                            \n                            \n                                    Optional\n                                autoOpen\n                            \n                            \n                                    Optional\n                                blacklistPage\n                            \n                            \n                                    Optional\n                                compliance\n                            \n                            \n                                    Optional\n                                container\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                cookie\n                            \n                            \n                                    Optional\n                                dismissOnScroll\n                            \n                            \n                                    Optional\n                                dismissOnTimeout\n                            \n                            \n                                    Optional\n                                dismissOnWindowClick\n                            \n                            \n                                    Optional\n                                elements\n                            \n                            \n                                    Optional\n                                enabled\n                            \n                            \n                                    Optional\n                                ignoreClicksFrom\n                            \n                            \n                                    Optional\n                                law\n                            \n                            \n                                    Optional\n                                layout\n                            \n                            \n                                    Optional\n                                layouts\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                mobileForceFloat\n                            \n                            \n                                    Optional\n                                onInitialise\n                            \n                            \n                                    Optional\n                                onNoCookieLaw\n                            \n                            \n                                    Optional\n                                onPopupClose\n                            \n                            \n                                    Optional\n                                onPopupOpen\n                            \n                            \n                                    Optional\n                                onRevokeChoice\n                            \n                            \n                                    Optional\n                                onStatusChange\n                            \n                            \n                                    Optional\n                                overrideHTML\n                            \n                            \n                                    Optional\n                                palette\n                            \n                            \n                                    Optional\n                                position\n                            \n                            \n                                    Optional\n                                revokable\n                            \n                            \n                                    Optional\n                                revokeBtn\n                            \n                            \n                                    Optional\n                                showLink\n                            \n                            \n                                    Optional\n                                static\n                            \n                            \n                                    Optional\n                                theme\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                whitelistPage\n                            \n                            \n                                    Optional\n                                window\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        animateRevokable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:128\n                        \n                    \n\n            \n                \n                    If true, the revokable button will tranlate in and out\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        autoAttach\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:160\n                        \n                    \n\n            \n                \n                    By default the created HTML is automatically appended to the container (which defaults to ). You can prevent this behaviour\nby setting this to false, but if you do, you must attach the element yourself, which is a public property of the popup instance:\nvar instance = cookieconsent.factory(options);\ndocument.body.appendChild(instance.element);\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        autoOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:150\n                        \n                    \n\n            \n                \n                    The application automatically decide whether the popup should open.\nSet this to false to prevent this from happening and to allow you to control the behaviour yourself\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        blacklistPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (string | RegExp)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:180\n                        \n                    \n\n            \n                \n                    Simple blacklist for pages. specify page by:\n\nusing a string : '/index.html'           (matches '/index.html' exactly) OR\nusing RegExp   : //page_[\\d]+.html/    (matched '/page_1.html' and '/page_2.html' etc)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        compliance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCompliance\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:62\n                        \n                    \n\n            \n                \n                    Define types of 'compliance' here. '{{value}}' strings in here are linked to elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        container\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:26\n                        \n                    \n\n            \n                \n                    Optional (expecting a HTML element) if passed, the popup is appended to this element. default is document.body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcContentOptions\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:36\n                        \n                    \n\n            \n                \n                    Each item defines the inner text for the element that it references\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieOptions\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:31\n                        \n                    \n\n            \n                \n                    Defaults cookie options - it is RECOMMENDED to set these values to correspond with your server\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dismissOnScroll\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | number\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:139\n                        \n                    \n\n            \n                \n                    Set value as scroll range to enable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dismissOnTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     boolean | number\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:144\n                        \n                    \n\n            \n                \n                    Set value as time in milliseconds to autodismiss after set time\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dismissOnWindowClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:203\n                        \n                    \n\n            \n                \n                    Set value as click anything on the page, excluding the ignoreClicksFrom below (if we click on the revoke button etc)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcHTMLElements\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:44\n                        \n                    \n\n            \n                \n                    This is the HTML for the elements above. The string {{header}} will be replaced with the equivalent text below.\nYou can remove '{{header}}' and write the content directly inside the HTML if you want.\n\nARIA rules suggest to ensure controls are tabbable (so the browser can find the first control),\n and to set the focus to the first interactive control (http://w3c.github.io/aria-in-html/)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:22\n                        \n                    \n\n            \n                \n                    If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ignoreClicksFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:209\n                        \n                    \n\n            \n                \n                    If dismissOnWindowClick is true, we can click on 'revoke' and we'll still dismiss the banner, so we need exceptions.\nShould be an array of class names (not CSS selectors).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        law\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcLawOptions\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:193\n                        \n                    \n\n            \n                \n                    Law Options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieLayout\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:78\n                        \n                    \n\n            \n                \n                    Default layout (see above)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layouts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcLayouts\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:73\n                        \n                    \n\n            \n                \n                    define layout layouts here\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean | NgcLocationOptions\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:198\n                        \n                    \n\n            \n                \n                    Location Options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mobileForceFloat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:165\n                        \n                    \n\n            \n                \n                    Set value if floating layout should be forced for mobile devices\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onInitialise\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:226\n                        \n                    \n\n            \n                \n                    This is called on start up, with the current chosen compliance. It can be used to tell you if the user has already consented or not as soon as you initialise the tool.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onNoCookieLaw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:238\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onPopupClose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:221\n                        \n                    \n\n            \n                \n                    This is called when the popup is closed. It can be used to clean up commands from onPopupOpen.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onPopupOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:216\n                        \n                    \n\n            \n                \n                    This is called when the popup is opened. It can be used to trigger an animation, or to attach extra handlers, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onRevokeChoice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:236\n                        \n                    \n\n            \n                \n                    This is called when the user clicks the revoke button. This means that their current choice has been invalidated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        onStatusChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:231\n                        \n                    \n\n            \n                \n                    This is called any time the status is changed. This can be used to react to changes that are made to the compliance level. You can use the popup instance functions from within these callbacks too. I.E. this.hasAnswered() and this.hasConsented().\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        overrideHTML\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:188\n                        \n                    \n\n            \n                \n                    If this is defined, then it is used as the inner html instead of layout. This allows for ultimate customisation.\nBe sure to use the classes cc-btn and cc-allow, cc-deny or cc-dismiss. They enable the app to register click\nhandlers. You can use other pre-existing classes too. See src/styles folder.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        palette\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcPaletteOptions\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:118\n                        \n                    \n\n            \n                \n                    If you want custom colours, pass them in here. this object should look like this.\nideally, any custom colours/themes should be created in a separate style sheet, as this is more efficient.\n{\n    popup: {background: '#000000', text: '#fff', link: '#fff'},//\n    button: {background: 'transparent', border: '#f8e71c', text: '#f8e71c'},//\n    highlight: {background: '#f8e71c', border: '#f8e71c', text: '#000000'},//\n}\nhighlight is optional and extends button. if it exists, it will apply to the first button\nonly background needs to be defined for every element. if not set, other colors can be calculated from it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookiePosition\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:87\n                        \n                    \n\n            \n                \n                    This refers to the popup windows position. we currently support:\n\nbanner positions: top, bottom\nfloating positions: top-left, top-right, bottom-left, bottom-right\n\nadds a class cc-floating or cc-banner which helps when styling\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        revokable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:124\n                        \n                    \n\n            \n                \n                    Some countries REQUIRE that a user can change their mind. You can configure this yourself.\nMost of the time this should be false, but the cookieconsent.law can change this to true if it detects that it should\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        revokeBtn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:57\n                        \n                    \n\n            \n                \n                    This is the html for the revoke button. This only shows up after the user has selected their level of consent\nIt can be enabled of disabled using the revokable option\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        showLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:134\n                        \n                    \n\n            \n                \n                    Used to disable link on existing layouts\nreplaces element messagelink with message and removes content of link\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        static\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:103\n                        \n                    \n\n            \n                \n                    The popup is fixed by default, but if you want it to be static (inline with the page content), set this to false\nNote: by default, we animate the height of the popup from 0 to full size\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieTheme\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:97\n                        \n                    \n\n            \n                \n                    Available styles\n\nblock (default, no extra classes)\nedgeless\nclassic\nUse your own style name and use .cc-theme-STYLENAME class in CSS to edit.\nNote: style 'wire' is used for the configurator, but has no CSS styles of its own, only palette is used.\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieType\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:68\n                        \n                    \n\n            \n                \n                    Select your type of popup here\nrefers to compliance (in other words, the buttons that are displayed)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        whitelistPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (string | RegExp)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:173\n                        \n                    \n\n            \n                \n                    Simple whitelist for pages. specify page by:\n\nusing a string : '/index.html'           (matches '/index.html' exactly) OR\nusing RegExp   : //page_[\\d]+.html/    (matched '/page_1.html' and '/page_2.html' etc)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts:51\n                        \n                    \n\n            \n                \n                    The placeholders {{classes}} and {{children}} both get replaced during initialisation:\n\n{{classes}} is where additional classes get added\n{{children}} is where the HTML children are placed\n\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { NgcHTMLElements } from '../model/html-elements';\nimport { NgcLocationOptions } from '../model/location-options';\nimport { NgcLawOptions } from '../model/law-options';\nimport { NgcContentOptions } from '../model/content-options';\nimport { NgcCookieOptions } from '../model/cookie-options';\nimport { NgcPaletteOptions } from '../model/palette-options';\nimport { NgcCompliance, NgcLayouts } from '../model/common-interfaces';\nimport { NgcCookieType, NgcCookieLayout, NgcCookiePosition, NgcCookieTheme } from '../model/common-types';\n\n\n/**\n * Cookie Consent configuration object.\n */\n@Injectable()\nexport class NgcCookieConsentConfig {\n\n  /**\n   * If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n   */\n  enabled? = true;\n  /**\n   * Optional (expecting a HTML element) if passed, the popup is appended to this element. default is `document.body`\n   */\n  container?: HTMLElement;\n\n  /**\n   * Defaults cookie options - it is RECOMMENDED to set these values to correspond with your server\n   */\n  cookie?: NgcCookieOptions;\n\n  /**\n   * Each item defines the inner text for the element that it references\n   */\n  content?: NgcContentOptions;\n\n  /**\n   * This is the HTML for the elements above. The string {{header}} will be replaced with the equivalent text below.\n   * You can remove '{{header}}' and write the content directly inside the HTML if you want.\n   * - ARIA rules suggest to ensure controls are tabbable (so the browser can find the first control),\n   *    and to set the focus to the first interactive control (http://w3c.github.io/aria-in-html/)\n   */\n  elements?: NgcHTMLElements;\n\n  /**\n   * The placeholders {{classes}} and {{children}} both get replaced during initialisation:\n   * - {{classes}} is where additional classes get added\n   * - {{children}} is where the HTML children are placed\n   */\n  window?: string;\n\n  /**\n   * This is the html for the revoke button. This only shows up after the user has selected their level of consent\n   * It can be enabled of disabled using the `revokable` option\n   */\n  revokeBtn?: string;\n\n  /**\n   * Define types of 'compliance' here. '{{value}}' strings in here are linked to `elements`\n   */\n  compliance?: NgcCompliance;\n\n  /**\n   * Select your type of popup here\n   * refers to `compliance` (in other words, the buttons that are displayed)\n   */\n  type?: NgcCookieType;\n\n  /**\n   * define layout layouts here\n   */\n  layouts?: NgcLayouts;\n\n  /**\n   * Default layout (see above)\n   */\n  layout?: NgcCookieLayout;\n\n  /**\n   * This refers to the popup windows position. we currently support:\n   * - banner positions: top, bottom\n   * - floating positions: top-left, top-right, bottom-left, bottom-right\n  *\n   * adds a class `cc-floating` or `cc-banner` which helps when styling\n   */\n  position?: NgcCookiePosition;\n\n  /**\n   * Available styles\n   * - block (default, no extra classes)\n   * - edgeless\n   * - classic\n   * Use your own style name and use `.cc-theme-STYLENAME` class in CSS to edit.\n   * Note: style 'wire' is used for the configurator, but has no CSS styles of its own, only palette is used.\n   */\n  theme?: NgcCookieTheme;\n\n  /**\n   * The popup is `fixed` by default, but if you want it to be static (inline with the page content), set this to false\n   * Note: by default, we animate the height of the popup from 0 to full size\n   */\n  static?: boolean;\n\n  /**\n   * If you want custom colours, pass them in here. this object should look like this.\n   * ideally, any custom colours/themes should be created in a separate style sheet, as this is more efficient.\n   *\n   * {\n   *     popup: {background: '#000000', text: '#fff', link: '#fff'},//\n   *     button: {background: 'transparent', border: '#f8e71c', text: '#f8e71c'},//\n   *     highlight: {background: '#f8e71c', border: '#f8e71c', text: '#000000'},//\n   * }\n   *\n   * `highlight` is optional and extends `button`. if it exists, it will apply to the first button\n   * only background needs to be defined for every element. if not set, other colors can be calculated from it\n   */\n  palette?: NgcPaletteOptions;\n\n  /**\n   * Some countries REQUIRE that a user can change their mind. You can configure this yourself.\n   * Most of the time this should be false, but the `cookieconsent.law` can change this to `true` if it detects that it should\n   */\n  revokable?: boolean;\n  /**\n   * If true, the revokable button will tranlate in and out\n   */\n  animateRevokable?: boolean;\n\n  /**\n   * Used to disable link on existing layouts\n   * replaces element messagelink with message and removes content of link\n   */\n  showLink?: boolean;\n\n  /**\n   * Set value as scroll range to enable\n   */\n  dismissOnScroll?: boolean | number;\n\n  /**\n   * Set value as time in milliseconds to autodismiss after set time\n   */\n  dismissOnTimeout?: boolean | number;\n\n  /**\n   * The application automatically decide whether the popup should open.\n   * Set this to false to prevent this from happening and to allow you to control the behaviour yourself\n   */\n  autoOpen?: boolean;\n\n  /**\n   * By default the created HTML is automatically appended to the container (which defaults to ). You can prevent this behaviour\n   * by setting this to false, but if you do, you must attach the `element` yourself, which is a public property of the popup instance:\n   *\n   * var instance = cookieconsent.factory(options);\n   * document.body.appendChild(instance.element);\n   *\n    */\n  autoAttach?: boolean;\n\n  /**\n   * Set value if floating layout should be forced for mobile devices\n   */\n  mobileForceFloat?: boolean;\n\n  /**\n   * Simple whitelist for pages. specify page by:\n   * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n   * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n   *\n   */\n  whitelistPage?: (string | RegExp)[] = [];\n  /**\n   * Simple blacklist for pages. specify page by:\n   * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n   * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n   *\n   */\n  blacklistPage?: (string | RegExp)[] = [];\n\n  /**\n   * If this is defined, then it is used as the inner html instead of layout. This allows for ultimate customisation.\n   * Be sure to use the classes `cc-btn` and `cc-allow`, `cc-deny` or `cc-dismiss`. They enable the app to register click\n   * handlers. You can use other pre-existing classes too. See `src/styles` folder.\n   *\n   */\n  overrideHTML?: string;\n\n  /**\n   * Law Options\n   */\n  law?: NgcLawOptions;\n\n  /**\n   * Location Options\n   */\n  location?: boolean | NgcLocationOptions;\n\n  /**\n   * Set value as click anything on the page, excluding the `ignoreClicksFrom` below (if we click on the revoke button etc)\n   */\n  dismissOnWindowClick?: boolean;\n\n  /**\n   * If `dismissOnWindowClick` is true, we can click on 'revoke' and we'll still dismiss the banner, so we need exceptions.\n   * Should be an array of class names (not CSS selectors).\n   */\n  ignoreClicksFrom?: string[];\n\n  // these callback hooks are called at certain points in the program execution\n\n  /**\n   * This is called when the popup is opened. It can be used to trigger an animation, or to attach extra handlers, etc.\n   */\n  onPopupOpen?: () => void;\n\n  /**\n   * This is called when the popup is closed. It can be used to clean up commands from onPopupOpen.\n   */\n  onPopupClose?: () => void;\n\n  /**\n   * This is called on start up, with the current chosen compliance. It can be used to tell you if the user has already consented or not as soon as you initialise the tool.\n   */\n  onInitialise?: (status: 'allow' | 'deny' | 'dismiss') => void;\n\n  /**\n   * This is called any time the status is changed. This can be used to react to changes that are made to the compliance level. You can use the popup instance functions from within these callbacks too. I.E. `this.hasAnswered()` and `this.hasConsented()`.\n   */\n  onStatusChange?: (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => void;\n\n  /**\n   * This is called when the user clicks the `revoke` button. This means that their current choice has been invalidated.\n   */\n  onRevokeChoice?: () => void;\n\n  onNoCookieLaw?: (countryCode: string, country: string) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgcCookieConsentModule.html":{"url":"modules/NgcCookieConsentModule.html","title":"module - NgcCookieConsentModule","body":"\n                   \n\n\n\n\n    Modules\n    NgcCookieConsentModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/ngx-cookieconsent.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Main module of the library\n\n        \n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(config: NgcCookieConsentConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/ngx-cookieconsent.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgcCookieConsentConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgcCookieConsentConfig, NgcCookieConsentService } from './service/index';\nimport { provideNgcCookieConsent } from './ngx-cookieconsent.config';\n\n/**\n * Main module of the library\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgcCookieConsentModule {\n\n  static forRoot(config: NgcCookieConsentConfig): ModuleWithProviders {\n    return {\n      ngModule: NgcCookieConsentModule,\n      providers: provideNgcCookieConsent(config)\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsentPopup.html":{"url":"interfaces/NgcCookieConsentPopup.html","title":"interface - NgcCookieConsentPopup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcCookieConsentPopup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Basic interface to represent cookieconsent.Popup object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clearStatus\n                                    \n                                \n                                \n                                    \n                                        close\n                                    \n                                \n                                \n                                    \n                                        destroy\n                                    \n                                \n                                \n                                    \n                                        fadeIn\n                                    \n                                \n                                \n                                    \n                                        fadeOut\n                                    \n                                \n                                \n                                    \n                                        getStatus\n                                    \n                                \n                                \n                                    \n                                        hasAnswered\n                                    \n                                \n                                \n                                    \n                                        hasConsented\n                                    \n                                \n                                \n                                    \n                                        isOpen\n                                    \n                                \n                                \n                                    \n                                        open\n                                    \n                                \n                                \n                                    \n                                        setStatus\n                                    \n                                \n                                \n                                    \n                                        toggleRevokeButton\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearStatus\n                        \n                    \n                \n            \n            \n                \nclearStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose(showRevoke: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                showRevoke\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgcCookieConsentPopup\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fadeIn\n                        \n                    \n                \n            \n            \n                \nfadeIn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fadeOut\n                        \n                    \n                \n            \n            \n                \nfadeOut()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         NgcCookieConsentStatus\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasAnswered\n                        \n                    \n                \n            \n            \n                \nhasAnswered()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasConsented\n                        \n                    \n                \n            \n            \n                \nhasConsented()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOpen\n                        \n                    \n                \n            \n            \n                \nisOpen()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         NgcCookieConsentPopup\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStatus\n                        \n                    \n                \n            \n            \n                \nsetStatus(status: NgcCookieConsentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgcCookieConsentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleRevokeButton\n                        \n                    \n                \n            \n            \n                \ntoggleRevokeButton(show: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                show\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializingEvent } from '../event/initializing.event';\nimport { NgcInitializationErrorEvent } from '../event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, successCallback?: (popup: NgcCookieConsentPopup) => void, errorCallback?: (error: Error, popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent!: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance!: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config!: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializingSource: Subject;\n  private initializedSource: Subject;\n  private initializationErrorSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent is initializing.\n   */\n  initializing$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.\n   */\n  initialized$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has failed to initialize.\n   */\n  initializationError$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializingSource = new Subject();\n    this.initializedSource = new Subject();\n    this.initializationErrorSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initializing$ = this.initializingSource.asObservable();\n    this.initialized$ = this.initializedSource.asObservable();\n    this.initializationError$ = this.initializationErrorSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window && this.window.cookieconsent) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializingSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config,\n        (popup: NgcCookieConsentPopup) => {\n          this.popupInstance = popup;\n          this.initializedSource.next();//notify of successful initialization\n        },\n        (error: Error, popup: NgcCookieConsentPopup) => {\n          this.initializationErrorSource.next({error: error});//notify of failed initialization\n        }\n      );\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgcCookieConsentService.html":{"url":"injectables/NgcCookieConsentService.html","title":"injectable - NgcCookieConsentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgcCookieConsentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with Cookie Consent API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                cookieconsent\n                            \n                            \n                                initializationError$\n                            \n                            \n                                    Private\n                                initializationErrorSource\n                            \n                            \n                                initialized$\n                            \n                            \n                                    Private\n                                initializedSource\n                            \n                            \n                                initializing$\n                            \n                            \n                                    Private\n                                initializingSource\n                            \n                            \n                                noCookieLaw$\n                            \n                            \n                                    Private\n                                noCookieLawSource\n                            \n                            \n                                popupClose$\n                            \n                            \n                                    Private\n                                popupCloseSource\n                            \n                            \n                                    Private\n                                popupInstance\n                            \n                            \n                                popupOpen$\n                            \n                            \n                                    Private\n                                popupOpenSource\n                            \n                            \n                                revokeChoice$\n                            \n                            \n                                    Private\n                                revokeChoiceSource\n                            \n                            \n                                statusChange$\n                            \n                            \n                                    Private\n                                statusChangeSource\n                            \n                            \n                                    Private\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkPopupInstantiated\n                            \n                            \n                                clearStatus\n                            \n                            \n                                close\n                            \n                            \n                                destroy\n                            \n                            \n                                fadeIn\n                            \n                            \n                                fadeOut\n                            \n                            \n                                getConfig\n                            \n                            \n                                getStatus\n                            \n                            \n                                getTransition\n                            \n                            \n                                hasAnswered\n                            \n                            \n                                hasConsented\n                            \n                            \n                                init\n                            \n                            \n                                isOpen\n                            \n                            \n                                open\n                            \n                            \n                                toggleRevokeButton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(windowService: WindowService, config: NgcCookieConsentConfig)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        windowService\n                                                  \n                                                        \n                                                                        WindowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        NgcCookieConsentConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkPopupInstantiated\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPopupInstantiated(method: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearStatus\n                        \n                    \n                \n            \n            \n                \nclearStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Clears the current cookie status.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose(showRevoke: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                showRevoke\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgcCookieConsentPopup\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:228\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fadeIn\n                        \n                    \n                \n            \n            \n                \nfadeIn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:233\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fadeOut\n                        \n                    \n                \n            \n            \n                \nfadeOut()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:238\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n            \n                \ngetConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Gets the current configuration  used by the Cookie Consent.\n\n\n                        \n                            Returns :         NgcCookieConsentConfig\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Gets the current cookie status.\n\n\n                        \n                            Returns :         NgcCookieConsentStatus\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransition\n                        \n                    \n                \n            \n            \n                \ngetTransition()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Gets the current browser support for translations\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasAnswered\n                        \n                    \n                \n            \n            \n                \nhasAnswered()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasConsented\n                        \n                    \n                \n            \n            \n                \nhasConsented()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:258\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(config: NgcCookieConsentConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Initializes Cookie Consent with the provided configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgcCookieConsentConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the configuration object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOpen\n                        \n                    \n                \n            \n            \n                \nisOpen()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:243\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n            \n                \nopen()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         NgcCookieConsentPopup\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleRevokeButton\n                        \n                    \n                \n            \n            \n                \ntoggleRevokeButton(show: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:248\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                show\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieConsentConfig\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookieconsent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieConsent\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializationError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:98\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent has failed to initialize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializationErrorSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialized$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:94\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializedSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializing$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:90\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent is initializing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializingSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noCookieLaw$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:110\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when no Cookie Law is applicable.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        noCookieLawSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupClose$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:86\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent popup closes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        popupCloseSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        popupInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcCookieConsentPopup\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        popupOpen$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:82\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent popup opens.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        popupOpenSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revokeChoice$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:106\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie is revoked.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        revokeChoiceSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusChange$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:102\n                        \n                    \n\n            \n                \n                    Observable to subscribe to and get notified when Cookie Consent status changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusChangeSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        window\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts:65\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializingEvent } from '../event/initializing.event';\nimport { NgcInitializationErrorEvent } from '../event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, successCallback?: (popup: NgcCookieConsentPopup) => void, errorCallback?: (error: Error, popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent!: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance!: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config!: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializingSource: Subject;\n  private initializedSource: Subject;\n  private initializationErrorSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent is initializing.\n   */\n  initializing$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.\n   */\n  initialized$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has failed to initialize.\n   */\n  initializationError$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializingSource = new Subject();\n    this.initializedSource = new Subject();\n    this.initializationErrorSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initializing$ = this.initializingSource.asObservable();\n    this.initialized$ = this.initializedSource.asObservable();\n    this.initializationError$ = this.initializationErrorSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window && this.window.cookieconsent) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializingSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config,\n        (popup: NgcCookieConsentPopup) => {\n          this.popupInstance = popup;\n          this.initializedSource.next();//notify of successful initialization\n        },\n        (error: Error, popup: NgcCookieConsentPopup) => {\n          this.initializationErrorSource.next({error: error});//notify of failed initialization\n        }\n      );\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcCookieConsentStatus.html":{"url":"interfaces/NgcCookieConsentStatus.html","title":"interface - NgcCookieConsentStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcCookieConsentStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the cookie consent status.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deny\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dismiss\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allow:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deny\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deny:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dismiss\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dismiss:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcCookieOptions.html":{"url":"classes/NgcCookieOptions.html","title":"class - NgcCookieOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcCookieOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/cookie-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Cookie Options.\nIt is recommended to set these values to correspond with your server.\nYou MUST set the ‘domain’ option, otherwise your cookies may not work.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                domain\n                            \n                            \n                                    Optional\n                                expiryDays\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                path\n                            \n                            \n                                    Optional\n                                secure\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        domain\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/cookie-options.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        expiryDays\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 365\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/cookie-options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'cookieconsent_status'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/cookie-options.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/cookie-options.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        secure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/cookie-options.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcCookieOptions {\n\n  // Name of the cookie that keeps track of users choice\n  // Default: 'cookieconsent_status'\n  name ? = 'cookieconsent_status';\n\n  // URL path that the cookie 'name' belongs to. The cookie can only be read at this location\n  // Default: '/'\n  path ? = '/';\n\n  // The domain that the cookie 'name' belongs to. The cookie can only be read on this domain. Guide to cookie domains\n  // Default: \n  domain?= '';\n\n  // The cookies expire date, specified in days (specify -1 for no expiry)\n  // Default: 365\n  expiryDays ? = 365;\n\n  // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.\n  secure ? = false;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcHTMLElements.html":{"url":"classes/NgcHTMLElements.html","title":"class - NgcHTMLElements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcHTMLElements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/html-elements.ts\n        \n\n\n            \n                Description\n            \n            \n                HTML Elements\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allow\n                            \n                            \n                                    Optional\n                                close\n                            \n                            \n                                    Optional\n                                deny\n                            \n                            \n                                    Optional\n                                dismiss\n                            \n                            \n                                    Optional\n                                header\n                            \n                            \n                                    Optional\n                                link\n                            \n                            \n                                    Optional\n                                message\n                            \n                            \n                                    Optional\n                                messagelink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        allow\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{allow}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{close}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deny\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{deny}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        dismiss\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{dismiss}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        header\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{header}}&nbsp;'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{link}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{message}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        messagelink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '{{message}} {{link}}'\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | undefined\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/model/html-elements.ts:21\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class NgcHTMLElements {\n\n  header ? = '{{header}}&nbsp;';\n\n  message ? = '{{message}}';\n\n  messagelink ? = '{{message}} {{link}}';\n\n  dismiss ? = '{{dismiss}}';\n\n  allow ? = '{{allow}}';\n\n  deny ? = '{{deny}}';\n\n  link ? = '{{link}}';\n\n  close ? = '{{close}}';\n\n  [key: string]: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcHasCookieConsent.html":{"url":"interfaces/NgcHasCookieConsent.html","title":"interface - NgcHasCookieConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcHasCookieConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Marker interface to indicate that an object (typically window) has cookieconsent property.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookieconsent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookieconsent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookieconsent:         NgcCookieConsent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgcCookieConsent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializingEvent } from '../event/initializing.event';\nimport { NgcInitializationErrorEvent } from '../event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, successCallback?: (popup: NgcCookieConsentPopup) => void, errorCallback?: (error: Error, popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent!: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance!: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config!: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject;\n  private popupCloseSource: Subject;\n  private initializingSource: Subject;\n  private initializedSource: Subject;\n  private initializationErrorSource: Subject;\n  private statusChangeSource: Subject;\n  private revokeChoiceSource: Subject;\n  private noCookieLawSource: Subject;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent is initializing.\n   */\n  initializing$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has been successfully initialized.\n   */\n  initialized$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent has failed to initialize.\n   */\n  initializationError$: Observable;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject();\n    this.popupCloseSource = new Subject();\n    this.initializingSource = new Subject();\n    this.initializedSource = new Subject();\n    this.initializationErrorSource = new Subject();\n    this.statusChangeSource = new Subject();\n    this.revokeChoiceSource = new Subject();\n    this.noCookieLawSource = new Subject();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initializing$ = this.initializingSource.asObservable();\n    this.initialized$ = this.initializedSource.asObservable();\n    this.initializationError$ = this.initializationErrorSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window && this.window.cookieconsent) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializingSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config,\n        (popup: NgcCookieConsentPopup) => {\n          this.popupInstance = popup;\n          this.initializedSource.next();//notify of successful initialization\n        },\n        (error: Error, popup: NgcCookieConsentPopup) => {\n          this.initializationErrorSource.next({error: error});//notify of failed initialization\n        }\n      );\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcInitializationErrorEvent.html":{"url":"interfaces/NgcInitializationErrorEvent.html","title":"interface - NgcInitializationErrorEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcInitializationErrorEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/event/initialization-error.event.ts\n        \n\n\n            \n                Description\n            \n            \n                Event fired when an error occured during Cookie Consent initialization.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     Error\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Error\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The error that occured during initialization.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcInitializationErrorEvent {\n  /**\n   * The error that occured during initialization.\n   */\n  error: Error;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcInitializingEvent.html":{"url":"interfaces/NgcInitializingEvent.html","title":"interface - NgcInitializingEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcInitializingEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/event/initializing.event.ts\n        \n\n\n            \n                Description\n            \n            \n                Event fired when Cookie Consent initializes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     \"allow\" | \"deny\" | \"dismiss\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"allow\" | \"deny\" | \"dismiss\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The status of cookie consent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcInitializingEvent {\n  /**\n   * The status of cookie consent\n   */\n  status: 'allow' | 'deny' | 'dismiss';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcLawOptions.html":{"url":"classes/NgcLawOptions.html","title":"class - NgcLawOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcLawOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/law-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Law Optons.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                countryCode\n                            \n                            \n                                    Optional\n                                regionalLaw\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/law-options.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        regionalLaw\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/law-options.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcLawOptions {\n  // Rather than getting the country code from the location services, you can hard code a particular country into the tool.\n  countryCode?: string;\n\n  // If false, then we only enable the popup if the country has the cookie law. We ignore all other country specific rules.\n  // Default: true\n  regionalLaw ?= true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcLayouts.html":{"url":"interfaces/NgcLayouts.html","title":"interface - NgcLayouts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcLayouts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Layouts\nJust like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\nThe word between these two markers tell the tool what each element is called.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts:30\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcLocationOptions.html":{"url":"classes/NgcLocationOptions.html","title":"class - NgcLocationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcLocationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/location-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Location Options\nThe location services are disabled by default. You are encouraged to implement a handler to your own service, rather than using the free ones provided.\nTo enable the basic location services, set 'location' to 'true'. To add you own services or configure the order or execution, pass an object with configuration properties.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                serviceDefinitions\n                            \n                            \n                                    Optional\n                                services\n                            \n                            \n                                    Optional\n                                timeout\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        serviceDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/location-options.ts:27\n                        \n                    \n\n            \n                \n                    This can be used to define new services via a key, but new services they can also go straight into the 'services' array in an ad-hoc fashion.\n It is recommended that you define services in 'serviceDefinitions' and use 'services' to configure priority between services\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        services\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : ['freegeoip', 'ipinfo', 'maxmind']\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/location-options.ts:21\n                        \n                    \n\n            \n                \n                    This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\nIf all services fail, the popup is opened without modification.\nIf a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\nDefault: ['freegeoip', 'ipinfo', 'maxmind']\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5000\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/location-options.ts:14\n                        \n                    \n\n            \n                \n                    We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\nDefault: 5000 (milliseconds)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NgcLocationOptions {\n\n  /**\n   * We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\n   * Default: 5000 (milliseconds)\n   */\n  timeout ?= 5000;\n  /**\n   * This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\n   * If all services fail, the popup is opened without modification.\n   * If a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\n   * Default: ['freegeoip', 'ipinfo', 'maxmind']\n   */\n  services ?: any[] = ['freegeoip', 'ipinfo', 'maxmind'];\n\n  /**\n   * This can be used to define new services via a key, but new services they can also go straight into the 'services' array in an ad-hoc fashion.\n   *  It is recommended that you define services in 'serviceDefinitions' and use 'services' to configure priority between services\n   */\n  serviceDefinitions ?: { [key: string]: (...options: any[]) => any };\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcNoCookieLawEvent.html":{"url":"interfaces/NgcNoCookieLawEvent.html","title":"interface - NgcNoCookieLawEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcNoCookieLawEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/event/no-cookie-law.event.ts\n        \n\n\n            \n                Description\n            \n            \n                Event fired when there is no cookie law for a given country.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            country\n                                        \n                                \n                                \n                                        \n                                            countryCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The country\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        countryCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        countryCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The country code\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcNoCookieLawEvent {\n    /**\n     * The country code\n     */\n    countryCode: string;\n    /**\n     * The country\n     */\n    country: string;\n  }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcPalette.html":{"url":"interfaces/NgcPalette.html","title":"interface - NgcPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcPalette\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Palette Options\nColours can be defined in additional stylesheets or using attributes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            background\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            border\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            link\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        background\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        background:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        border\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        border:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgcCompliance {\n  [key: string]: string;\n}\n\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\n\nexport interface NgcPalette {\n  background?: string;\n  border?: string;\n  link?: string;\n  text?: string;\n}\n\n/**\n * Layouts\n *\n * Just like the 'compliance' buttons are built using the '{{' and '}}' markers, the main layout can be built too like this too.\n * The word between these two markers tell the tool what each element is called.\n */\nexport interface NgcLayouts {\n  [key: string]: string;\n}\n\n\n/**\n * Interface representing the cookie consent status.\n */\nexport interface NgcCookieConsentStatus {\n  allow?: 'allow';\n  deny?: 'deny';\n  dismiss?: 'dismiss';\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgcPaletteOptions.html":{"url":"classes/NgcPaletteOptions.html","title":"class - NgcPaletteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgcPaletteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/model/palette-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Palette Options\nColours can be defined in additional stylesheets or using attributes.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                button\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Optional\n                                popup\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        button\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcPalette\n\n                    \n                \n                \n                    \n                        Default value : { background: 'transparent', border: '#f8e71c', text: '#f8e71c' }\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/palette-options.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcPalette\n\n                    \n                \n                \n                    \n                        Default value : { background: '#f8e71c', border: '#f8e71c', text: '#000000' }\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/palette-options.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        popup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgcPalette\n\n                    \n                \n                \n                    \n                        Default value : { background: '#000000', text: '#fff', link: '#fff' }\n                    \n                \n                    \n                        \n                                Defined in libs/ngx-cookieconsent/src/lib/model/palette-options.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NgcPalette } from './common-interfaces';\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\nexport class NgcPaletteOptions {\n  popup?: NgcPalette = { background: '#000000', text: '#fff', link: '#fff' };\n\n  button?: NgcPalette = { background: 'transparent', border: '#f8e71c', text: '#f8e71c' };\n\n  highlight?: NgcPalette = { background: '#f8e71c', border: '#f8e71c', text: '#000000' };\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgcStatusChangeEvent.html":{"url":"interfaces/NgcStatusChangeEvent.html","title":"interface - NgcStatusChangeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgcStatusChangeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/event/status-change.event.ts\n        \n\n\n            \n                Description\n            \n            \n                Event fired when cookie status changes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            chosenBefore\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chosenBefore\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chosenBefore:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Flag indicating if the new status was chosen before\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     \"allow\" | \"deny\" | \"dismiss\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"allow\" | \"deny\" | \"dismiss\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The new status of cookie consent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgcStatusChangeEvent {\n  /**\n   * The new status of cookie consent\n   */\n  status: 'allow' | 'deny' | 'dismiss';\n  /**\n   * Flag indicating if the new status was chosen before\n   */\n  chosenBefore: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WindowService.html":{"url":"injectables/WindowService.html","title":"injectable - WindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WindowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-cookieconsent/src/lib/service/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to interact with the window object (or its equivalent on a server platform).\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_doc: Document)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-cookieconsent/src/lib/service/window.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _doc\n                                                  \n                                                        \n                                                                    Document\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeWindow\n                    \n                \n\n                \n                    \n                        getnativeWindow()\n                    \n                \n                            \n                                \n                                    Defined in libs/ngx-cookieconsent/src/lib/service/window.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n/**\n * Service to interact with the `window` object (or its equivalent on a server platform).\n */\n@Injectable()\nexport class WindowService {\n\n  constructor(@Inject(DOCUMENT) private _doc: Document) {}\n\n  get nativeWindow(): any {\n    return this._doc?.defaultView || window;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n2.2.3 (2019-06-14)\nFeatures\n\nlocation: allow activating location services in config and improve typings for NgcLawOptions, NgcLocationOptions (306fe18), closes #57\n\n2.2.2 (2019-05-28)\nBug Fixes\n\nNgcCookieOptions: add missing export (971b65e), closes #53\nsponsorship: fix github sponsorship of yours truly (d3a7b3d)\n\n2.2.1 (2019-05-14)\nBug Fixes\n\ntypings: correct  ERROR TS2411 when compiling with strict mode on (4fb02eb), closes #49\n\n2.2.0 (2019-03-28)\nFeatures\n\ncustomLayout: allow customizing the cookie bar layout and content (4b32ce0)\n\n2.1.1 (2019-02-06)\nBug Fixes\n\ntypings: fix lint isssue due to bad typings in NgcCookieConsentStatus (27ebb55), closes #11\n\n2.1.0 (2018-10-25)\nFeatures\n\ncore: update to cookieconsent v3.1.0 and its features (d674b93)\noptions: add policy and target options to NgcContentOptions (a0849f2), closes #23\n\n2.0.0 (2018-07-19)\nFeatures\n\nng6: add support for angular 6 (2ab9341), closes #17 #18\nonNoCookieLaw: add support for onNoCookieLaw callback (2d960c8)\n\nBREAKING CHANGES\n\nng6: - Minimum version of Angular is now v6+\n\n\nMinimum version of Node is v8+\n\n1.1.1 (2018-07-18)\nBug Fixes\n\ninitialize$: callback was never called due to typo (onInitialise) (6cd260f), closes #19\n\n1.1.0 (2018-07-03)\nBug Fixes\n\ndemo: fix wrong assets url on deployed demo app (fedcbd9)\n\nFeatures\n\nclose: add close method to allow fully closing the 'Coookie Policy' bar (02ada28), closes #15\ndemo: add support for translated cookie consent messages + update docs (e1bf9bf), closes #14\n\n1.0.1 (2017-11-22)\nFeatures\n\ncore: make cookie.domainoption mandatory in configuration service and update doc (9835145)\ndemo: update demo app to Angular CLI 1.4.7 (37371b6)\npackaging: relax peerDependencies versions (02496e8), closes #8\n\n1.0.0 (2017-09-07)\nFeatures\n\nall: initial commit (5f8a340)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/event/initialization-error.event.ts\n            \n            interface\n            NgcInitializationErrorEvent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/event/initializing.event.ts\n            \n            interface\n            NgcInitializingEvent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/event/no-cookie-law.event.ts\n            \n            interface\n            NgcNoCookieLawEvent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/event/status-change.event.ts\n            \n            interface\n            NgcStatusChangeEvent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n            \n            interface\n            NgcCompliance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n            \n            interface\n            NgcCookieConsentStatus\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n            \n            interface\n            NgcLayouts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/common-interfaces.ts\n            \n            interface\n            NgcPalette\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/content-options.ts\n            \n            class\n            NgcContentOptions\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/cookie-options.ts\n            \n            class\n            NgcCookieOptions\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/html-elements.ts\n            \n            class\n            NgcHTMLElements\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/law-options.ts\n            \n            class\n            NgcLawOptions\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/location-options.ts\n            \n            class\n            NgcLocationOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/model/palette-options.ts\n            \n            class\n            NgcPaletteOptions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/ngx-cookieconsent.config.ts\n            \n            function\n            provideNgcCookieConsent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/cookieconsent-config.ts\n            \n            injectable\n            NgcCookieConsentConfig\n            \n                97 %\n                (36/37)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n            \n            injectable\n            NgcCookieConsentService\n            \n                37 %\n                (14/37)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n            \n            interface\n            NgcCookieConsent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n            \n            interface\n            NgcCookieConsentPopup\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/cookieconsent.service.ts\n            \n            interface\n            NgcHasCookieConsent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                libs/ngx-cookieconsent/src/lib/service/window.service.ts\n            \n            injectable\n            WindowService\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 17.0.8\n        \n            @angular/common : 17.0.8\n        \n            @angular/compiler : 17.0.8\n        \n            @angular/core : 17.0.8\n        \n            @angular/forms : 17.0.8\n        \n            @angular/localize : 17.0.8\n        \n            @angular/platform-browser : 17.0.8\n        \n            @angular/platform-browser-dynamic : 17.0.8\n        \n            @angular/router : 17.0.8\n        \n            @fortawesome/angular-fontawesome : ^0.14.1\n        \n            @fortawesome/fontawesome-svg-core : ^6.4.2\n        \n            @fortawesome/free-brands-svg-icons : ^6.4.2\n        \n            @fortawesome/free-solid-svg-icons : ^6.4.2\n        \n            @ng-bootstrap/ng-bootstrap : ^16.0.0\n        \n            @ngx-translate/core : ^15.0.0\n        \n            @ngx-translate/http-loader : ^8.0.0\n        \n            @nx/angular : 17.2.8\n        \n            @popperjs/core : ^2.11.6\n        \n            @stackblitz/sdk : ^1.9.0\n        \n            bootstrap : ^5.3.2\n        \n            cookieconsent : ^3.1.1\n        \n            marked : ^9.0.0\n        \n            ngx-clipboard : ^16.0.0\n        \n            ngx-color-picker : ^16.0.0\n        \n            ngx-markdown : ^17.1.1\n        \n            prismjs : ^1.29.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : 0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            provideNgcCookieConsent   (libs/.../ngx-cookieconsent.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-cookieconsent/src/lib/ngx-cookieconsent.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        provideNgcCookieConsent\n                        \n                    \n                \n            \n            \n                \nprovideNgcCookieConsent(config: NgcCookieConsentConfig)\n                \n            \n\n\n\n\n            \n                \n                        Provides the necessary dependencies to use the library in a Standalone Application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgcCookieConsentConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Provider[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nngx-cookieconsent\n\n\n\n\n\nCookie Consent module for Angular\n\n\n  \n\n\nDemo\nView the module in action at https://tinesoft.github.io/ngx-cookieconsent\nDependencies\n\nAngular (see  Compatibility Matrix  below)\nCookie Consent (requires Cookie Consent 3 or higher, tested with 3.1.0)\n\nInstallation\nInstall Cookie Consent dependency:\nExample :npm install --save cookieconsent\n\n// or \n\nyarn add cookieconsentNow install ngx-cookieconsent via:\nExample :npm install --save ngx-cookieconsent\n\n// or\n\nyarn add ngx-cookieconsent\nNote: If you are using Angular CLI or Nx CLI to build your app, make sure that cookieconsent is properly listed as a global library, and as global style.\n\nTo do so, edit your angular.json (or project.json for Nx CLI based apps) as such:\nExample :      \"scripts\": [\n        \"node_modules/cookieconsent/build/cookieconsent.min.js\"\n      ],\n\n      \"styles\": [\n        \"node_modules/cookieconsent/build/cookieconsent.min.css\"\n      ],\nConfiguration\nPrepare the config:\nExample :import {NgcCookieConsentConfig} from 'ngx-cookieconsent';\n\nconst cookieConfig:NgcCookieConsentConfig = {\n  cookie: {\n    domain: 'localhost' // or 'your.domain.com' // it is mandatory to set a domain, for cookies to work properly (see https://goo.gl/S2Hy2A)\n  },\n  palette: {\n    popup: {\n      background: '#000'\n    },\n    button: {\n      background: '#f1d600'\n    }\n  },\n  theme: 'edgeless',\n  type: 'opt-out'\n};\nFor Angular Standalone API-based apps\nIf you are using Angular Standalone API to bootstrap your application, you can configure the library by leveraging the new provideNgcCookieConsent(config) helper (added since v5.x.x), as such:\nExample :import {provideNgcCookieConsent} from 'ngx-cookieconsent';\n\n//...\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideNgcCookieConsent(cookieConfig),\n    // ...\n  ]\n});For Angular (ng)Module-based apps\nFor traditional ngModule-based angular application, you need to import the library module in your application module, as such:\nExample :import {NgcCookieConsentModule} from 'ngx-cookieconsent';\n\n//...\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [NgcCookieConsentModule.forRoot(cookieConfig), ...],  \n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}Other modules in your application can simply import NgcCookieConsentModule:\nExample :import {NgcCookieConsentModule} from 'ngx-cookieconsent';\n\n@NgModule({\n  declarations: [OtherComponent, ...],\n  imports: [NgcCookieConsentModule, ...], \n})\nexport class OtherModule {\n}Usage\nInject the NgcCookieContentService in your main component (i.e. AppComponent) to show the cookie consent popup after the component is loaded. You don't need to explicitly call its init() method (done automatically when the service's constructor gets called upon instantiation By Angular).\nAlso, you can use the injected NgcCookieContentService to update the config (using init()), subscribe to events and do stuff like disabling cookies or other.\nHere is how it works:\nExample :import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgcCookieConsentService } from 'ngx-cookieconsent';\nimport { Subscription }   from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n  //keep refs to subscriptions to be able to unsubscribe later\n  private popupOpenSubscription!: Subscription;\n  private popupCloseSubscription!: Subscription;\n  private initializingSubscription!: Subscription;\n  private initializedSubscription!: Subscription;\n  private initializationErrorSubscription!: Subscription;\n  private statusChangeSubscription!: Subscription;\n  private revokeChoiceSubscription!: Subscription;\n  private noCookieLawSubscription!: Subscription;\n\n  constructor(private ccService: NgcCookieConsentService){}\n\n  ngOnInit() {\n    // subscribe to cookieconsent observables to react to main events\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.initializingSubscription = this.ccService.initializing$.subscribe(\n      (event: NgcInitializingEvent) => {\n        // the cookieconsent is initilializing... Not yet safe to call methods like `NgcCookieConsentService.hasAnswered()`\n        console.log(`initializing: ${JSON.stringify(event)}`);\n      });\n    \n    this.initializedSubscription = this.ccService.initialized$.subscribe(\n      () => {\n        // the cookieconsent has been successfully initialized.\n        // It's now safe to use methods on NgcCookieConsentService that require it, like `hasAnswered()` for eg...\n        console.log(`initialized: ${JSON.stringify(event)}`);\n      });\n\n    this.initializationErrorSubscription = this.ccService.initializationError$.subscribe(\n      (event: NgcInitializationErrorEvent) => {\n        // the cookieconsent has failed to initialize... \n        console.log(`initializationError: ${JSON.stringify(event.error?.message)}`);\n      });\n\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(\n      (event: NgcStatusChangeEvent) => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(\n      () => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n\n      this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(\n      (event: NgcNoCookieLawEvent) => {\n        // you can use this.ccService.getConfig() to do stuff...\n      });\n  }\n\n  ngOnDestroy() {\n    // unsubscribe to cookieconsent observables to prevent memory leaks\n    this.popupOpenSubscription.unsubscribe();\n    this.popupCloseSubscription.unsubscribe();\n    this.initializingSubscription.unsubscribe();\n    this.initializedSubscription.unsubscribe();\n    this.initializationErrorSubscription.unsubscribe();\n    this.statusChangeSubscription.unsubscribe();\n    this.revokeChoiceSubscription.unsubscribe();\n    this.noCookieLawSubscription.unsubscribe();\n  }\n}\nSee Cookie Consent Documentation to see more about how to customize the UI or interact with user interactions.\nI18n Support\nMessages displayed in the Cookie Consent Bar can easily be translated, using libraries like ngx-translate.\nBasically this involved the following steps (using ngx-translate + Anglar CLI):\n\nInstall and configure ngx-translate\n\nProvide the translation JSON files in src/assets/, for e.g: en.json, fr.json, ...\n\n\nExample :{\n    \"cookie\": {\n        \"header\": \"Cookies used on the website!\",\n        \"message\": \"This website uses cookies to ensure you get the best experience on our website.\",\n        \"dismiss\": \"Got it!\",\n        \"allow\": \"Allow cookies\",\n        \"deny\": \"Decline\",\n        \"link\": \"Learn more\",\n        \"policy\": \"Cookie Policy\"\n    }\n}\nNote: see content-options.ts for complete list of messages that can be translated.\n\n\nConfigure your main component AppComponent\n\nExample :import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(private ccService: NgcCookieConsentService, private translateService:TranslateService) {\n  }\n\n  ngOnInit() {\n    // Support for translated cookies messages\n    this.translateService.addLangs(['en', 'fr']);\n    this.translateService.setDefaultLang('en');\n\n    const browserLang = this.translateService.getBrowserLang();\n    this.translateService.use(browserLang.match(/en|fr/) ? browserLang : 'en');\n\n    this.translateService//\n      .get(['cookie.header', 'cookie.message', 'cookie.dismiss', 'cookie.allow', 'cookie.deny', 'cookie.link', 'cookie.policy'])\n      .subscribe(data => {\n\n        this.ccService.getConfig().content = this.ccService.getConfig().content || {} ;\n        // Override default messages with the translated ones\n        this.ccService.getConfig().content.header = data['cookie.header'];\n        this.ccService.getConfig().content.message = data['cookie.message'];\n        this.ccService.getConfig().content.dismiss = data['cookie.dismiss'];\n        this.ccService.getConfig().content.allow = data['cookie.allow'];\n        this.ccService.getConfig().content.deny = data['cookie.deny'];\n        this.ccService.getConfig().content.link = data['cookie.link'];\n        this.ccService.getConfig().content.policy = data['cookie.policy'];\n\n        this.ccService.destroy(); // remove previous cookie bar (with default messages)\n        this.ccService.init(this.ccService.getConfig()); // update config with translated messages\n      });\n  }\n}Custom Layout Support\nCookie Consent supports custom layouts, and so does ngx-cookieconsent.\nSo if your are not happy with the default appearance of the cookie bar, you can totally customize it to better suit your needs. This involves overriding a few options:\n\nNgcCookieConsentConfig.layout: to define the name of your custom layout to use. For e.g my-custom-layout\nNgcCookieConsentConfig.layouts: to define your custom layout HTML. Elements between {{ and }} will be replaced by their content (see in [NgcCookieConsentConfig.content below)\nNgcCookieConsentConfig.elements : html elements referenced in the custom layout (between {{ and }})\nNgcCookieConsentConfig.content : content of elements referenced in the custom elements above (between {{ and }})\n\nHere is a example of a custom layout, that is inspired from the default 'basic' layout , but simply changes the message and links that are displayed in the bar.\n\n  \n\n\nExample :import {NgcCookieConsentModule, NgcCookieConsentConfig} from 'ngx-cookieconsent';\n\nconst cookieConfig:NgcCookieConsentConfig = {\n  cookie: {\n    domain: 'localhost'// it is recommended to set your domain, for cookies to work properly\n  },\n  palette: {\n    popup: {\n      background: '#000'\n    },\n    button: {\n      background: '#f1d600'\n    }\n  },\n  theme: 'edgeless',\n  type: 'opt-out',\n  layout: 'my-custom-layout',\n  layouts: {\n    \"my-custom-layout\": '{{messagelink}}{{compliance}}'\n  },\n  elements:{\n    messagelink: `\n    {{message}} \n      {{cookiePolicyLink}}, \n      {{privacyPolicyLink}} and our \n      {{tosLink}}\n    \n    `,\n  },\n  content:{\n    message: 'By using our site, you acknowledge that you have read and understand our ',\n    \n    cookiePolicyLink: 'Cookie Policy',\n    cookiePolicyHref: 'https://cookie.com',\n\n    privacyPolicyLink: 'Privacy Policy',\n    privacyPolicyHref: 'https://privacy.com',\n\n    tosLink: 'Terms of Service',\n    tosHref: 'https://tos.com',\n  }\n};\n\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [NgcCookieConsentModule.forRoot(cookieConfig), ...],  \n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}Compatibility with Angular\nEvery Nx plugin relies on the underlying Nx Workspace/DevKit it runs on. This table provides the compatibility matrix between major versions of Nx workspace and this plugin.\n\n\n\nLibrary Version\nAngular version\n\n\n\n\n>=v6.0.0\n>=v16.x.x\n\n\n>=v5.0.0\n>=v15.x.x\n\n\n>=v4.0.1\n>=v14.x.x\n\n\nv3.0.1\n>=v12.x.x\n\n\n>=v2.2.3\n>=v6.x.x\n\n\nv1.1.0\n\n\n\n\nCredits\nngx-cookieconsent is built upon Cookie Consent, by Osano\nLicense\nCopyright (c) 2018-present Tine Kondo. Licensed under the MIT License (MIT)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018-present Tine Kondo\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgcCookieConsentModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0-development\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgcCookieCompliance   (libs/.../common-types.ts)\n                        \n                        \n                            NgcCookieLayout   (libs/.../common-types.ts)\n                        \n                        \n                            NgcCookiePosition   (libs/.../common-types.ts)\n                        \n                        \n                            NgcCookieTheme   (libs/.../common-types.ts)\n                        \n                        \n                            NgcCookieType   (libs/.../common-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-cookieconsent/src/lib/model/common-types.ts\n    \n    \n        \n            \n                \n                    \n                    NgcCookieCompliance\n                \n            \n            \n                \n                    Type for possible Cookie Bar compliances\n\n                \n            \n            \n                \n                        \"info\" | \"opt-in\" | \"opt-out\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgcCookieLayout\n                \n            \n            \n                \n                    Type for possible Cookie Bar layouts\n\n                \n            \n            \n                \n                        \"basic\" | \"basic-close\" | \"basic-header\" | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgcCookiePosition\n                \n            \n            \n                \n                    Type for possible Cookie Bar positions\n\n                \n            \n            \n                \n                        \"top\" | \"bottom\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgcCookieTheme\n                \n            \n            \n                \n                    Type for possible Cookie Bar themes\n\n                \n            \n            \n                \n                        \"block\" | \"edgeless\" | \"classic\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgcCookieType\n                \n            \n            \n                \n                    Type for possible Cookie Bar types\n\n                \n            \n            \n                \n                        \"info\" | \"opt-in\" | \"opt-out\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
